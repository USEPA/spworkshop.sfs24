[
  {
    "objectID": "streamcattools.html#why-streamcatlakecat",
    "href": "streamcattools.html#why-streamcatlakecat",
    "title": "6  StreamCat & LakeCat",
    "section": "\n6.1 Why StreamCat/LakeCat?",
    "text": "6.1 Why StreamCat/LakeCat?\n\n\n\n\nThe examples of watershed delineation and metric extraction we covered thus far have been for relatively small systems. The process to generate watershed information can be far more complicated for large watersheds, when the desired metrics are needed at many sites across a large geographic extent, or when data layers that are not served as part of other R packages.\nFor these reasons, we developed the StreamCat and LakeCat datasets. StreamCat uses the medium resolution NHPlus (version 2.1) as its geospatial framework to provide watershed summaries of several hundred metrics for all accumulative watersheds in the NHDPlus - about 2.6 million stream segments. Likewise, LakeCat provides watershed metrics for close to 400,000 lakes across the conterminous U.S. as well.\nBoth datasets are now accessible through the StreamCatTools package."
  },
  {
    "objectID": "streamcattools.html#accessing-streamcat",
    "href": "streamcattools.html#accessing-streamcat",
    "title": "6  StreamCat & LakeCat",
    "section": "\n6.2 Accessing StreamCat",
    "text": "6.2 Accessing StreamCat\nLet’s revisit the Calapooia watershed and extract percent row crop for 2019:\n\n# Calapooia Watershed\nlatitude <- 44.62892\nlongitude <- -123.13113\n\n# Make point sf of sample site\npt <- data.frame(site_name = 'Calapooia',\n                 longitude = longitude,\n                 latitude = latitude) %>% \n  st_as_sf(coords = c('longitude', 'latitude'), crs = 4269)\n\n# Generate watershed\ncal_ws <- pt %>% \n  nhdplusTools::discover_nhdplus_id() %>% \n  list(featureSource = \"comid\", featureID = .) %>% \n  nhdplusTools::get_nldi_basin() %>% \n  st_transform(crs = 5070)\n\n# Download NLCD for 2019\nnlcd <- get_nlcd(\n  template = cal_ws,\n  year = 2019,\n  label = 'Calapooia') %>%\n  terra::project('epsg:5070', method = 'near') \n\n# Use terra to extract the watershed metrics\nterra::extract(nlcd,\n               terra::vect(cal_ws)) %>%\n  group_by(Class) %>%\n  summarise(count = n()) %>%\n  mutate(percent = (count / sum(count)) * 100) %>%\n  filter(Class == 'Cultivated Crops')\n#> # A tibble: 1 × 3\n#>   Class             count percent\n#>   <fct>             <int>   <dbl>\n#> 1 Cultivated Crops 112475    10.5\n\nNow let’s extract the same information using StreamCatTools.\nWe can find the metric name by consulting the StreamCat variable list.\nI can also be useful to explore the online map and table interfaces of StreamCat.\n\ncomid <- sc_get_comid(pt)\n\nsc_get_data(comid = comid,\n            metric = 'PctCrop2019', \n            aoi = 'watershed')\n#> # A tibble: 1 × 3\n#>      COMID WSAREASQKM PCTCROP2019WS\n#>      <dbl>      <dbl>         <dbl>\n#> 1 23763521       965.          10.5\n\nStreamCat pre-stages the calculated metrics in an online database and accessible via an API to make them available to the public.\nIn addition to watershed-level summaries, StreamCat provides metrics for the local catchment (i.e., the area draining to the stream segment, excluding upstream sources).\n\n\nFigure 6.1: Geospatial framework of the StreamCat Dataset\n\n\n\nsc_get_data(comid = comid,\n            metric = 'PctCrop2019', \n            aoi = 'catchment,watershed')\n#> # A tibble: 1 × 5\n#>      COMID WSAREASQKM CATAREASQKM PCTCROP2019CAT PCTCROP2019WS\n#>      <dbl>      <dbl>       <dbl>          <dbl>         <dbl>\n#> 1 23763521       965.        8.49           36.6          10.5\n\nWe can see the difference between the local catchment and accumulative watershed boundaries in this map.\n\ntrib_pt2 <- st_sfc(st_point(c(longitude, latitude)), crs = 4269)\nstart_comid <- nhdplusTools::discover_nhdplus_id(trib_pt2)\nws_source <- list(featureSource = \"comid\", featureID = start_comid)\n\ntrib_ws2 <- nhdplusTools::get_nldi_basin(nldi_feature = ws_source)\n\nstreams <- nhdplusTools::navigate_nldi(ws_source, mode = \"UT\", \n                                       distance_km = 2000) %>%\n  pluck('UT_flowlines')\n\n# Use get_nhdplus to access the individual stream sub-catchments\nall_catchments <- nhdplusTools::get_nhdplus(comid = streams$nhdplus_comid,\n                                            realization = 'catchment')\n\nfocal_cat <- nhdplusTools::get_nhdplus(comid = start_comid,\n                                       realization = 'catchment')\n\nmapview(streams, color='blue', legend = FALSE) +\n  mapview(focal_cat, alpha.regions=.08, col.regions = 'red') +\n  mapview(all_catchments, alpha.regions=.08, col.regions = 'yellow') \n\n\n\n\n\n\nFor a subset of watershed metrics, summaries within ~100m of the stream segment are also available for catchments and watersheds:\n\n\nFigure 6.2: Riparian buffers (red) of NHD stream lines (white) and on-network NLCD water pixels (blue).\n\n\n\nsc_get_data(comid = comid,\n            metric = 'PctCrop2019', \n            aoi = 'catchment,riparian_catchment,watershed,riparian_watershed') %>% \n  as.data.frame()\n#>      COMID WSAREASQKM WSAREASQKMRP100 CATAREASQKM CATAREASQKMRP100\n#> 1 23763521   964.6101          136.17      8.4933           1.1097\n#>   PCTCROP2019CATRP100 PCTCROP2019WSRP100 PCTCROP2019CAT PCTCROP2019WS\n#> 1                9.08                8.4          36.59         10.49\n\nStreamCatTools also makes it very easy to grab data for entire regions. In this example, we will extract % crop for the entire state of Iowa and plot these percentages as a histogram.\n\niowa_crop <- sc_get_data(state = 'IA',\n                         metric = 'PctCrop2019', \n                         aoi = 'watershed')\n\nggplot() + \n  geom_histogram(data = iowa_crop,\n                 aes(x = PCTCROP2019WS)) + \n  theme_bw()\n\n\n\n\nWe can provide multiple metrics to the request by separating them with a comma.\nNote that the request is provided as a single string, 'PctCrop2001, PctCrop2019', rather than a vector of metrics: c('PctCrop2001', 'PctCrop2019'). However, the request itself is agnostic to formatting of the text. For example, these requests will also work: 'pctcrop2001, pctcrop2019' or 'PCTCROP2001,PCTCROP2019'.\nHere, we compare % watershed crop in 2001 to 2019:\n\niowa_crop <- sc_get_data(state = 'IA',\n                         metric = 'PctCrop2001, PctCrop2019', \n                         aoi = 'watershed')\n\n# Pivot table to long format\niowa_crop_long <- iowa_crop %>% \n  pivot_longer(\n    cols = !COMID:WSAREASQKM,\n    values_to = 'PctCrop',\n    names_to = 'Year')\n\nggplot() + \n  geom_boxplot(data = iowa_crop_long,\n               aes(x = Year,\n                   y = PctCrop)) + \n  theme_bw()\n\n\n\n\nStreamCat contains hundreds of metrics and we recommend consulting the metric list to identify those of interest for your study."
  },
  {
    "objectID": "streamcattools.html#accessing-lakecat",
    "href": "streamcattools.html#accessing-lakecat",
    "title": "6  StreamCat & LakeCat",
    "section": "\n6.3 Accessing LakeCat",
    "text": "6.3 Accessing LakeCat\nLike StreamCat, LakeCat makes local catchment and watershed metrics available for lakes across the lower 48 states. Like StreamCat, the metrics were developed from a framework of pre-staged lake-catchments that allowed for accumulation of results, even when lakes are nested.\nThe challenge of watershed delineation and extraction of data is even greater than for lakes than streams. There are no online services that do this. Therefore, LakeCat is one of the only ways to get watershed metrics for lakes (however, see LAGOS-NE and LAGOS-US GEO).\n As with StreamCat, the Metrics and Definitions page is the best way to examine which variables are available in LakeCat. Currently, fewer variables are available in LakeCat than StreamCat, mainly due to the fact that riparian buffers were not included as an “AOI” for lakes.\nThe R function to access LakeCat data was designed to parallel StreamCat functions. In this example, we:\n\nDefine a sf object of a sample point at Pelican Lake, WI.\nObtain the lake waterbody polygon.\nExtract the COMID (unique ID) to query LakeCat.\nPull data on mean watershed elevation, calcium oxide content of the geology, % sand and organic matter content of soils, and % of the watershed composed of deciduous forest.\n\n\n# Pelican Lake, WI\nlatitude <- 45.502840\nlongitude <- -89.198694\n\npelican_pt <- data.frame(site_name = 'Pelican Lake',\n                         latitude = latitude,\n                         longitude = longitude) %>% \n  st_as_sf(coords = c('longitude', 'latitude'), crs = 4326)\n\npelican_lake <- nhdplusTools::get_waterbodies(pelican_pt) \n\ncomid <- pelican_lake %>% \n  pull(comid)\n\nlc_get_data(metric = 'elev, cao, sand, om, pctdecid2019',\n            aoi = 'watershed',\n            comid = comid)\n#> # A tibble: 1 × 7\n#>       COMID WSAREASQKM SANDWS ELEVWS CAOWS PCTDECID2019WS  OMWS\n#>       <dbl>      <dbl>  <dbl>  <dbl> <dbl>          <dbl> <dbl>\n#> 1 167120863       41.0   59.6   491.  4.81           14.7  16.7\n\nAt this time, the ability to query LakeCat based on geography, such as state, county, or hydrologic region is still forthcoming. However, it is possible to query based on multiple COMIDs. In this code, we will create a 100Km buffer around pelican lake, acces those lakes via nhdplusTools, and access LakeCat data for these lakes. We’ll then map lakes and color them by watershed area and compare lake areas with watershed areas.\n\n# 100km buffer to pelican point\npelican_buffer <- \n  pelican_pt %>% \n  st_buffer(10000)\n\npelican_neighbors <- nhdplusTools::get_waterbodies(pelican_buffer) %>% \n  filter(ftype == 'LakePond') %>% \n  rename(COMID = comid)\n\ncomids <- pelican_neighbors %>% \n  pull(COMID)\n\nlc_data <- lc_get_data(metric = 'elev, cao, sand, om, pctdecid2019',\n                       aoi = 'watershed',\n                       comid = comids) \n\npelican_neighbors <- \n  pelican_neighbors %>% \n  left_join(lc_data, join_by('COMID'))\n\nggplot() + \n  geom_sf(data = pelican_neighbors, \n          aes(fill = WSAREASQKM)) + \n  geom_sf(data = pelican_buffer,\n          color = 'red',\n          fill = NA) + \n  scale_fill_viridis_c(option = \"magma\") + \n  theme_bw()\n\n\n\n\nggplot() + \n  geom_point(data = pelican_neighbors,\n             aes(x = WSAREASQKM, \n                 y = areasqkm), \n             size = 4, alpha = 0.5) +\n  scale_x_log10() +\n  xlab('Watershed Area (Km2)') +\n  scale_y_log10() +\n  ylab('Lake Area (Km2)') +\n  theme_bw()\n\n\n\n\nIn the next sections, we will put what we have learned about GIS in R together with the spmodel package to model two types of data. In the first example, we will model the specific conductivity of lakes in several midwestern states. Second, we will model the presence/absence of a damselfly genus (Argia) in the northeastern U.S. streams. We’ll access Argia presences/absences via another R package that was recently released called finsyncR. ## R Code Appendix\n\n\n\n\nlibrary(StreamCatTools)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(terra)\nlibrary(FedData)\nlibrary(nhdplusTools)\nlibrary(mapview)\n# Calapooia Watershed\nlatitude <- 44.62892\nlongitude <- -123.13113\n\n# Make point sf of sample site\npt <- data.frame(site_name = 'Calapooia',\n                 longitude = longitude,\n                 latitude = latitude) %>% \n  st_as_sf(coords = c('longitude', 'latitude'), crs = 4269)\n\n# Generate watershed\ncal_ws <- pt %>% \n  nhdplusTools::discover_nhdplus_id() %>% \n  list(featureSource = \"comid\", featureID = .) %>% \n  nhdplusTools::get_nldi_basin() %>% \n  st_transform(crs = 5070)\n\n# Download NLCD for 2019\nnlcd <- get_nlcd(\n  template = cal_ws,\n  year = 2019,\n  label = 'Calapooia') %>%\n  terra::project('epsg:5070', method = 'near') \n\n# Use terra to extract the watershed metrics\nterra::extract(nlcd,\n               terra::vect(cal_ws)) %>%\n  group_by(Class) %>%\n  summarise(count = n()) %>%\n  mutate(percent = (count / sum(count)) * 100) %>%\n  filter(Class == 'Cultivated Crops')\ncomid <- sc_get_comid(pt)\n\nsc_get_data(comid = comid,\n            metric = 'PctCrop2019', \n            aoi = 'watershed')\nsc_get_data(comid = comid,\n            metric = 'PctCrop2019', \n            aoi = 'catchment,watershed')\ntrib_pt2 <- st_sfc(st_point(c(longitude, latitude)), crs = 4269)\nstart_comid <- nhdplusTools::discover_nhdplus_id(trib_pt2)\nws_source <- list(featureSource = \"comid\", featureID = start_comid)\n\ntrib_ws2 <- nhdplusTools::get_nldi_basin(nldi_feature = ws_source)\n\nstreams <- nhdplusTools::navigate_nldi(ws_source, mode = \"UT\", \n                                       distance_km = 2000) %>%\n  pluck('UT_flowlines')\n\n# Use get_nhdplus to access the individual stream sub-catchments\nall_catchments <- nhdplusTools::get_nhdplus(comid = streams$nhdplus_comid,\n                                            realization = 'catchment')\n\nfocal_cat <- nhdplusTools::get_nhdplus(comid = start_comid,\n                                       realization = 'catchment')\n\nmapview(streams, color='blue', legend = FALSE) +\n  mapview(focal_cat, alpha.regions=.08, col.regions = 'red') +\n  mapview(all_catchments, alpha.regions=.08, col.regions = 'yellow') \nsc_get_data(comid = comid,\n            metric = 'PctCrop2019', \n            aoi = 'catchment,riparian_catchment,watershed,riparian_watershed') %>% \n  as.data.frame()\niowa_crop <- sc_get_data(state = 'IA',\n                         metric = 'PctCrop2019', \n                         aoi = 'watershed')\n\nggplot() + \n  geom_histogram(data = iowa_crop,\n                 aes(x = PCTCROP2019WS)) + \n  theme_bw()\niowa_crop <- sc_get_data(state = 'IA',\n                         metric = 'PctCrop2001, PctCrop2019', \n                         aoi = 'watershed')\n\n# Pivot table to long format\niowa_crop_long <- iowa_crop %>% \n  pivot_longer(\n    cols = !COMID:WSAREASQKM,\n    values_to = 'PctCrop',\n    names_to = 'Year')\n\nggplot() + \n  geom_boxplot(data = iowa_crop_long,\n               aes(x = Year,\n                   y = PctCrop)) + \n  theme_bw()\n# Pelican Lake, WI\nlatitude <- 45.502840\nlongitude <- -89.198694\n\npelican_pt <- data.frame(site_name = 'Pelican Lake',\n                         latitude = latitude,\n                         longitude = longitude) %>% \n  st_as_sf(coords = c('longitude', 'latitude'), crs = 4326)\n\npelican_lake <- nhdplusTools::get_waterbodies(pelican_pt) \n\ncomid <- pelican_lake %>% \n  pull(comid)\n\nlc_get_data(metric = 'elev, cao, sand, om, pctdecid2019',\n            aoi = 'watershed',\n            comid = comid)\n# 100km buffer to pelican point\npelican_buffer <- \n  pelican_pt %>% \n  st_buffer(10000)\n\npelican_neighbors <- nhdplusTools::get_waterbodies(pelican_buffer) %>% \n  filter(ftype == 'LakePond') %>% \n  rename(COMID = comid)\n\ncomids <- pelican_neighbors %>% \n  pull(COMID)\n\nlc_data <- lc_get_data(metric = 'elev, cao, sand, om, pctdecid2019',\n                       aoi = 'watershed',\n                       comid = comids) \n\npelican_neighbors <- \n  pelican_neighbors %>% \n  left_join(lc_data, join_by('COMID'))\n\nggplot() + \n  geom_sf(data = pelican_neighbors, \n          aes(fill = WSAREASQKM)) + \n  geom_sf(data = pelican_buffer,\n          color = 'red',\n          fill = NA) + \n  scale_fill_viridis_c(option = \"magma\") + \n  theme_bw()\n\nggplot() + \n  geom_point(data = pelican_neighbors,\n             aes(x = WSAREASQKM, \n                 y = areasqkm), \n             size = 4, alpha = 0.5) +\n  scale_x_log10() +\n  xlab('Watershed Area (Km2)') +\n  scale_y_log10() +\n  ylab('Lake Area (Km2)') +\n  theme_bw()"
  },
  {
    "objectID": "watershed-delineation.html#usgs-streamstats",
    "href": "watershed-delineation.html#usgs-streamstats",
    "title": "5  Watershed Delineation in R",
    "section": "\n5.1 USGS StreamStats",
    "text": "5.1 USGS StreamStats\nThe USGS’s StreamStats is an online service and map interface that allows users to navigate to a desired location and delineate a watershed boundary with the click of a mouse:\nhttps://streamstats.usgs.gov/ss/\nIn addition to the map interface, the data are also accessible via an API:\nhttps://streamstats.usgs.gov/docs/streamstatsservices\nFor example, it is possible to replicate the point and click website by pasting a URL into the browser by combining the following information:\n\nBase service URL\nState where watershed is located\nLongitude\nLatitude\nAdditional options\n\nStreamStats delineates a basin from pre-processed DEMs based on these inputs to the service.\nWe can write a custom function to make this request. This code:\n\nCombines the required inputs into a single text query\nMassages the data returned by the API to create a sf object\n\n\n# Create custom function to delineate watershed from StreamStats service\nstreamstats_ws = function(state, longitude, latitude){\n  p1 = 'https://streamstats.usgs.gov/streamstatsservices/watershed.geojson?rcode='\n  p2 = '&xlocation='\n  p3 = '&ylocation='\n  p4 = '&crs=4269&includeparameters=false&includeflowtypes=false&includefeatures=true&simplify=true'\n  query <-  paste0(p1, state, p2, toString(longitude), p3, toString(latitude), p4)\n  mydata <- jsonlite::fromJSON(query, simplifyVector = FALSE, simplifyDataFrame = FALSE)\n  poly_geojsonsting <- jsonlite::toJSON(mydata$featurecollection[[2]]$feature, auto_unbox = TRUE)\n  poly <- geojsonio::geojson_sf(poly_geojsonsting) \n  poly\n}\n\n# Define location for delineation (Calapooia Watershed)\nstate <- 'OR'\nlatitude <- 44.62892\nlongitude <- -123.13113\n\n# Delineate watershed\ncal_ws <- streamstats_ws('OR', longitude, latitude) %>% \n  st_transform(crs = 5070)\n\n# Generate point for plotting\ncal_pt <- data.frame(ptid = 'Calapooia River', lon = longitude, lat = latitude)  %>% \n  st_as_sf(coords = c('lon', 'lat'), crs = 4269) %>% \n  st_transform(crs = 5070)\n\ncal_map <- ggplot() + \n  geom_sf(data = cal_ws, fill=NA) +\n  geom_sf(data = cal_pt, size=3) +\n  theme_bw()\n\ncal_map\n\n\n\n\nAs noted above, we can replicate the call to the API by pasting the p1 to p4 + state and lat/lon:\n\nstate <- 'OR'\nlatitude <- 44.62892\nlongitude <- -123.13113\n\np1 = 'https://streamstats.usgs.gov/streamstatsservices/watershed.geojson?rcode='\np2 = '&xlocation='\np3 = '&ylocation='\np4 = '&crs=4269&includeparameters=false&includeflowtypes=false&includefeatures=true&simplify=true'\n\nquery <-  paste0(p1, state, p2, toString(longitude), p3, toString(latitude), p4)\n\nprint(query)\n#> [1] \"https://streamstats.usgs.gov/streamstatsservices/watershed.geojson?rcode=OR&xlocation=-123.13113&ylocation=44.62892&crs=4269&includeparameters=false&includeflowtypes=false&includefeatures=true&simplify=true\"\n\nHowever, when the query is provided to the browser, it does not look like a watershed. The additional lines of code in the function we defined above used the jsonlite and geojsonio packages to massage the output and produce the sf spatial object cal_ws.\nThis code produces a watershed boundary (cal_ws) for the Calapooia watershed in Oregon. But what if the latitude/longitude are slightly off of the stream network?\n\n# A close, but different watershed\nlatitude <- 44.61892\nlongitude <- -123.13731\n\ntrib_ws <- streamstats_ws('OR', longitude, latitude) %>% \n  st_transform(crs = 5070)\n\ntrib_pt <- data.frame(ptid = 'Calapooia Trib', lon = longitude, lat = latitude)  %>% \n  st_as_sf(coords = c('lon', 'lat'), crs = 4269) %>% \n  st_transform(crs = 5070)\n\ncal_map <- cal_map +\n  geom_sf(data = trib_ws, fill=NA, color='red') +\n  geom_sf(data = trib_pt, size=3, color = 'pink') \n\ncal_map\n\n\n\n\nLet’s zoom into the problem. To do this we’ll use the mapview package. Here, we use mapview::mapview() to create an interactive map of the Calapooia watersheds.\n\nmapview::mapviewOptions(fgb=FALSE)\n\nmapview(cal_ws, alpha.regions=.08) + \n  mapview(cal_pt, col.regions = 'black') + \n  mapview(trib_ws, alpha.regions=.08, col.regions = 'red') +\n  mapview(trib_pt, col.regions = 'red')  \n\n\n\n\n\n\nWe can see that the second lat/lon delineated a very small watershed that appears to be a tributary to the mainstem of the Calapooia. This highlights one of the challenges of watershed delineation - small discrepancies in lat/lon can produce a vastely different boundary.\nIn the next section, we’ll explore another method for watershed delineation."
  },
  {
    "objectID": "watershed-delineation.html#nhdplustools",
    "href": "watershed-delineation.html#nhdplustools",
    "title": "5  Watershed Delineation in R",
    "section": "\n5.2 nhdplusTools",
    "text": "5.2 nhdplusTools\nnhdplusTools is an R package that can access the Network Linked Data Index (NLDI) service, which provides navigation and extraction of NHDPlus data:\nhttps://doi-usgs.github.io/nhdplusTools/\nnhdplusTools includes network navigation options as well as watershed delineation. The delineation method differs from StreamStats in that the sub-catchments are pre-staged and based on the local catchments of the NHDPlus.To delineate a basin, we must identify the starting point and the NLDI service walks the network for us to generate the watershed.\n\n# Calapooia Watershed\nlatitude <- 44.62892\nlongitude <- -123.13113\n\n# Simple feature option to generate point without any other attributes\ncal_pt2 <- st_sfc(st_point(c(longitude, latitude)), crs = 4269)\n\n# Identify the network location (NHDPlus common ID or COMID)\nstart_comid <- nhdplusTools::discover_nhdplus_id(cal_pt2)\n\n# Combine info into list (required by NLDI basin function)\nws_source <- list(featureSource = \"comid\", featureID = start_comid)\n\ncal_ws2 <- nhdplusTools::get_nldi_basin(nldi_feature = ws_source)\n\ncal_map <- ggplot() + \n  geom_sf(data = cal_ws2, fill = NA) +\n  geom_sf(data = cal_pt2) +\n  theme_bw()\n\ncal_map\n\n\n\n\nThe delineated watershed should look familiar since it is the Calapooia River watershed.\nHowever, you may notice the slight difference in the placement of the point and the outlet of the watershed relative to the StreamStats watershed.\nLet’s have a closer look at the two watersheds together:\n\nmapview::mapviewOptions(fgb=FALSE)\n\nmapview(cal_pt, col.regions = 'black') + \n  mapview(cal_ws, alpha.regions = .08) + \n  mapview(cal_ws2, alpha.regions = .08, col.regions = 'red') \n\n\n\n\n\n\nBut, what about the small tributary?\nAlthough the points are separated by a distance, they produce the same watershed. This is because the watersheds are based the aggregation of pre-defined sub-catchments of the medium-resolution NHDPlus. Since the points fall within the same local sub-catchment, they have the same outlet and basin area.\n\n# Trib coordinates\nlatitude <- 44.61892\nlongitude <- -123.13731\n\ntrib_pt2 <- st_sfc(st_point(c(longitude, latitude)), crs = 4269)\nstart_comid <- nhdplusTools::discover_nhdplus_id(trib_pt2)\nws_source <- list(featureSource = \"comid\", featureID = start_comid)\n\ntrib_ws2 <- nhdplusTools::get_nldi_basin(nldi_feature = ws_source)\n\nstreams <- nhdplusTools::navigate_nldi(ws_source, mode = \"UT\", \n                                       distance_km = 2000) %>%\n  pluck('UT_flowlines')\n\n# Use get_nhdplus to access the individual stream sub-catchments\ncats <- nhdplusTools::get_nhdplus(comid = streams$nhdplus_comid,\n                                  realization = 'catchment')\n\nmapview(streams, legend = FALSE) + \n  mapview(cal_pt2, col.regions = 'red') + \n  mapview(trib_pt2, col.regions = 'blue') + \n  mapview(cal_ws2, alpha.regions=.08, col.regions = 'red') +\n  mapview(cats, alpha.regions=.08, col.regions = 'blue') \n\n\n\n\n\n\nThis is the major limitation of NHDPlus (and by extension StreamCat). Thus, when deciding whether to use StreamStats or NHDPlusTools for watershed delineation, it is important to consider that:\n\nStreamStats can delineate smaller tributaries, but cannot do large watersheds that cross state lines.\nStreamStats is not available for all U.S. states.\nNHDPlusTools can delineate smallish to large watersheds (e.g., Mississippi River), but misses very small systems. (However, you can try experimenting with their implementation of high-res NHDPlus.)\n\nOutside of the U.S., these tools are not available. However, it is still possible to delineate a custom watershed from raw DEM data with help from the whitebox R package. This book by J.P. Gannon has instructions on how to prepare a DEM and provide catchment pourpoints for delineation.\nFinally, Jeff Hollister (U.S. EPA) developed an R package called elevatr that can access DEM data from the web both within and outside the U.S.\nLet’s put it all together…\n\n\n\n\n\n\nExercise\n\n\n\n\nDelineate the Logan River watershed in Utah at -111.855, 41.707.\nUse the watershed boundary to download NLCD land cover data.\nPlot the NLCD data within the watershed bounday.\nCalculate the percent cover of each land use.\n\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\ntic()\n\n# Logan River Watershed\nlatitude <- 41.707\nlongitude <- -111.855\n\n# Define the lat/lon\nstart_point <- st_sfc(st_point(c(longitude, latitude)), crs = 4269)\n\n# Find COMID of this point\nstart_comid <- nhdplusTools::discover_nhdplus_id(start_point)\n\n# Create a list object that defines the feature source and starting COMID\nws_source <- list(featureSource = \"comid\", featureID = start_comid)\n\n# Delineate basin\nlogan_ws <- nhdplusTools::get_nldi_basin(nldi_feature = ws_source) %>%\n\n  # Transform to EPSG 5070\n  st_transform(crs = 5070)\n\n# Alternate method\n# logan_ws <- streamstats_ws('UT', longitude, latitude) %>% \n#   st_transform(crs = 5070)\n\nnlcd <- get_nlcd(\n  template = logan_ws,\n  year = 2021,\n  label = 'Logan') %>%\n  \n  # Project raster to EPSG 5070\n  terra::project('epsg:5070', method = 'near') %>% \n  \n  # Mask the raster\n  terra::mask(logan_ws) %>% \n  \n  # Clip the raster\n  terra::crop(logan_ws)\n\nggplot() + \n  geom_spatraster(data = nlcd) +\n  geom_sf(data = logan_ws,\n          fill = NA,\n          lwd = 1.5,\n          color = 'white') +\n  theme_bw()\n\n\n\n\nlogan_nlcd <- terra::extract(nlcd, \n                             terra::vect(logan_ws))\n\nlogan_nlcd %>% \n  group_by(Class) %>% \n  summarise(count = n()) %>% \n  mutate(percent = (count / sum(count)) * 100)\n#> # A tibble: 15 × 3\n#>    Class                         count  percent\n#>    <fct>                         <int>    <dbl>\n#>  1 Open Water                      240  0.0151 \n#>  2 Developed, Open Space         24184  1.52   \n#>  3 Developed, Low Intensity      12049  0.756  \n#>  4 Developed, Medium Intensity    7961  0.500  \n#>  5 Developed High Intensity       1872  0.118  \n#>  6 Barren Land (Rock/Sand/Clay)     86  0.00540\n#>  7 Deciduous Forest             441144 27.7    \n#>  8 Evergreen Forest             451517 28.3    \n#>  9 Mixed Forest                  47735  3.00   \n#> 10 Shrub/Scrub                  568734 35.7    \n#> 11 Grassland/Herbaceous           9819  0.616  \n#> 12 Pasture/Hay                    8310  0.522  \n#> 13 Cultivated Crops              13686  0.859  \n#> 14 Woody Wetlands                 5218  0.328  \n#> 15 Emergent Herbaceous Wetlands    605  0.0380\n\ntoc()\n#> 13.81 sec elapsed\n\n\n\n\nIn the exercise above, we delineated a watershed from a latitude/longitude, transformed its projection, downloaded land cover raster data for the watershed, transformed its projection, masked and clipped the raster for mapping, and calculated the percent of each land cover type within the watershed boundary – all under 30 seconds."
  },
  {
    "objectID": "watershed-delineation.html#r-code-appendix",
    "href": "watershed-delineation.html#r-code-appendix",
    "title": "5  Watershed Delineation in R",
    "section": "\n5.3 R Code Appendix",
    "text": "5.3 R Code Appendix\n\n\n\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(mapview)\nlibrary(nhdplusTools)\nlibrary(FedData)\nlibrary(terra)\nlibrary(tidyterra)\nlibrary(tictoc)\n# Create custom function to delineate watershed from StreamStats service\nstreamstats_ws = function(state, longitude, latitude){\n  p1 = 'https://streamstats.usgs.gov/streamstatsservices/watershed.geojson?rcode='\n  p2 = '&xlocation='\n  p3 = '&ylocation='\n  p4 = '&crs=4269&includeparameters=false&includeflowtypes=false&includefeatures=true&simplify=true'\n  query <-  paste0(p1, state, p2, toString(longitude), p3, toString(latitude), p4)\n  mydata <- jsonlite::fromJSON(query, simplifyVector = FALSE, simplifyDataFrame = FALSE)\n  poly_geojsonsting <- jsonlite::toJSON(mydata$featurecollection[[2]]$feature, auto_unbox = TRUE)\n  poly <- geojsonio::geojson_sf(poly_geojsonsting) \n  poly\n}\n\n# Define location for delineation (Calapooia Watershed)\nstate <- 'OR'\nlatitude <- 44.62892\nlongitude <- -123.13113\n\n# Delineate watershed\ncal_ws <- streamstats_ws('OR', longitude, latitude) %>% \n  st_transform(crs = 5070)\n\n# Generate point for plotting\ncal_pt <- data.frame(ptid = 'Calapooia River', lon = longitude, lat = latitude)  %>% \n  st_as_sf(coords = c('lon', 'lat'), crs = 4269) %>% \n  st_transform(crs = 5070)\n\ncal_map <- ggplot() + \n  geom_sf(data = cal_ws, fill=NA) +\n  geom_sf(data = cal_pt, size=3) +\n  theme_bw()\n\ncal_map\nstate <- 'OR'\nlatitude <- 44.62892\nlongitude <- -123.13113\n\np1 = 'https://streamstats.usgs.gov/streamstatsservices/watershed.geojson?rcode='\np2 = '&xlocation='\np3 = '&ylocation='\np4 = '&crs=4269&includeparameters=false&includeflowtypes=false&includefeatures=true&simplify=true'\n\nquery <-  paste0(p1, state, p2, toString(longitude), p3, toString(latitude), p4)\n\nprint(query)\n# A close, but different watershed\nlatitude <- 44.61892\nlongitude <- -123.13731\n\ntrib_ws <- streamstats_ws('OR', longitude, latitude) %>% \n  st_transform(crs = 5070)\n\ntrib_pt <- data.frame(ptid = 'Calapooia Trib', lon = longitude, lat = latitude)  %>% \n  st_as_sf(coords = c('lon', 'lat'), crs = 4269) %>% \n  st_transform(crs = 5070)\n\ncal_map <- cal_map +\n  geom_sf(data = trib_ws, fill=NA, color='red') +\n  geom_sf(data = trib_pt, size=3, color = 'pink') \n\ncal_map\nmapview::mapviewOptions(fgb=FALSE)\n\nmapview(cal_ws, alpha.regions=.08) + \n  mapview(cal_pt, col.regions = 'black') + \n  mapview(trib_ws, alpha.regions=.08, col.regions = 'red') +\n  mapview(trib_pt, col.regions = 'red')  \n# Calapooia Watershed\nlatitude <- 44.62892\nlongitude <- -123.13113\n\n# Simple feature option to generate point without any other attributes\ncal_pt2 <- st_sfc(st_point(c(longitude, latitude)), crs = 4269)\n\n# Identify the network location (NHDPlus common ID or COMID)\nstart_comid <- nhdplusTools::discover_nhdplus_id(cal_pt2)\n\n# Combine info into list (required by NLDI basin function)\nws_source <- list(featureSource = \"comid\", featureID = start_comid)\n\ncal_ws2 <- nhdplusTools::get_nldi_basin(nldi_feature = ws_source)\n\ncal_map <- ggplot() + \n  geom_sf(data = cal_ws2, fill = NA) +\n  geom_sf(data = cal_pt2) +\n  theme_bw()\n\ncal_map\nmapview::mapviewOptions(fgb=FALSE)\n\nmapview(cal_pt, col.regions = 'black') + \n  mapview(cal_ws, alpha.regions = .08) + \n  mapview(cal_ws2, alpha.regions = .08, col.regions = 'red') \n# Trib coordinates\nlatitude <- 44.61892\nlongitude <- -123.13731\n\ntrib_pt2 <- st_sfc(st_point(c(longitude, latitude)), crs = 4269)\nstart_comid <- nhdplusTools::discover_nhdplus_id(trib_pt2)\nws_source <- list(featureSource = \"comid\", featureID = start_comid)\n\ntrib_ws2 <- nhdplusTools::get_nldi_basin(nldi_feature = ws_source)\n\nstreams <- nhdplusTools::navigate_nldi(ws_source, mode = \"UT\", \n                                       distance_km = 2000) %>%\n  pluck('UT_flowlines')\n\n# Use get_nhdplus to access the individual stream sub-catchments\ncats <- nhdplusTools::get_nhdplus(comid = streams$nhdplus_comid,\n                                  realization = 'catchment')\n\nmapview(streams, legend = FALSE) + \n  mapview(cal_pt2, col.regions = 'red') + \n  mapview(trib_pt2, col.regions = 'blue') + \n  mapview(cal_ws2, alpha.regions=.08, col.regions = 'red') +\n  mapview(cats, alpha.regions=.08, col.regions = 'blue') \n\ntic()\n\n# Logan River Watershed\nlatitude <- 41.707\nlongitude <- -111.855\n\n# Define the lat/lon\nstart_point <- st_sfc(st_point(c(longitude, latitude)), crs = 4269)\n\n# Find COMID of this point\nstart_comid <- nhdplusTools::discover_nhdplus_id(start_point)\n\n# Create a list object that defines the feature source and starting COMID\nws_source <- list(featureSource = \"comid\", featureID = start_comid)\n\n# Delineate basin\nlogan_ws <- nhdplusTools::get_nldi_basin(nldi_feature = ws_source) %>%\n\n  # Transform to EPSG 5070\n  st_transform(crs = 5070)\n\n# Alternate method\n# logan_ws <- streamstats_ws('UT', longitude, latitude) %>% \n#   st_transform(crs = 5070)\n\nnlcd <- get_nlcd(\n  template = logan_ws,\n  year = 2021,\n  label = 'Logan') %>%\n  \n  # Project raster to EPSG 5070\n  terra::project('epsg:5070', method = 'near') %>% \n  \n  # Mask the raster\n  terra::mask(logan_ws) %>% \n  \n  # Clip the raster\n  terra::crop(logan_ws)\n\nggplot() + \n  geom_spatraster(data = nlcd) +\n  geom_sf(data = logan_ws,\n          fill = NA,\n          lwd = 1.5,\n          color = 'white') +\n  theme_bw()\n\nlogan_nlcd <- terra::extract(nlcd, \n                             terra::vect(logan_ws))\n\nlogan_nlcd %>% \n  group_by(Class) %>% \n  summarise(count = n()) %>% \n  mutate(percent = (count / sum(count)) * 100)\n\ntoc()"
  },
  {
    "objectID": "spatial-lm.html#data-prep",
    "href": "spatial-lm.html#data-prep",
    "title": "7  A SLM Application to Lake Conductivity",
    "section": "\n7.1 Data Prep",
    "text": "7.1 Data Prep\n\n7.1.1 Conductivity (Dependent) Data\nLoad required packages…\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tigris)\nlibrary(StreamCatTools)\nlibrary(spmodel)\nlibrary(data.sfs2024)\n\nRead and prep table of lake conductivity values…\n\n# Read in states to give some context\nstates <- states(cb = TRUE, progress_bar = FALSE)  %>% \n  filter(!STUSPS %in% c('HI', 'PR', 'AK', 'MP', 'GU', 'AS', 'VI'))  %>% \n  st_transform(crs = 5070)\n\n# Read in lakes, select/massage columns, convert to spatial object\ndata(\"cond_nla_data\")\n\n# Plot sample locations\nggplot() +\n  geom_sf(data = states,\n          fill = NA) +\n  geom_sf(data = cond_nla_data,\n          aes(color = year)) +\n  scale_color_manual(values=c(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n\n\n\nSelect sample sites within Minnesota and plot:\n\nLocations colored by sample year.\nLocations colored by conductivity\n\n\nMN <- states %>% \n  filter(STUSPS == 'MN')\n\ncond_mn <- cond_nla_data %>% \n  st_filter(MN) \n\n# Plot sample locations\nggplot() +\n  geom_sf(data = MN,\n          fill = NA) +\n  geom_sf(data = cond_mn,\n          aes(color = year)) +\n  scale_color_manual(values=c(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n\n\n\n# Plot sample locations\nggplot() +\n  geom_sf(data = MN,\n          fill = NA) +\n  geom_sf(data = cond_mn,\n          aes(color = log(COND_RESULT))) +\n  scale_color_distiller(palette = 'YlOrRd', direction = 1) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n\n\n\n\n7.1.2 LakeCat (Independent) Data\nWe will use the similar watershed predictors as Dumelle et al. (2023).\nAlready included with data table with the response variable are:\n\nLake Area (AREA_HA)\nSample year (year)\n\nFrom LakeCat, we also will get the following predictor variables:\n\nLocal long-term air temperature\nLong-term watershed precipitation\nCalcium Oxide content of underlying lithology\nSulfur content of underlying lithology\n\n\n\ncomids <- cond_mn$COMID\n\nmn_lakecat <- lc_get_data(comid = comids,\n                          metric = 'Tmean8110, Precip8110,\n                          CaO, S') %>% \n  select(COMID, TMEAN8110CAT, PRECIP8110WS, CAOWS, SWS)\n\nIn addition to these static LakeCat data, we would also like to pull in data from specific years of NLCD to match sample years for:\n\n% of watershed composed of crop area (year specific)\n% of watershed composed of urban area (year specific)\n\nSince we have multiple years of conductivity data, we’d like to match specific years of NLCD land cover data. The years of available NLCD metrics happen to be 1 year before each NLA sample year. We’ll need to trick the tables to allow them to match and join.\nThis code will:\n\nGrab LakeCat NLCD % crop data for years 2006, 2011, 2016\nClean and pivot columns\nAdd 1 to each year since available NLCD are 1 year behind field samples\n\n\ncrop <- \n  \n  # Grab LakeCat crop data\n  lc_get_data(comid = comids,\n              aoi = 'watershed',\n              metric = 'pctcrop2006, pctcrop2011, pctcrop2016') %>% \n  \n  # Remove watershed area from data\n  select(-WSAREASQKM) %>% \n  \n  # Pivot table to long to create \"year\" column\n  pivot_longer(!COMID, names_to = 'tmpcol', values_to = 'PCTCROPWS') %>% \n  \n  # Remove PCTCROP and WS to make \"year\" column\n  mutate(year = as.integer(\n    str_replace_all(tmpcol, 'PCTCROP|WS', ''))) %>% \n  \n  # Add 1 to each year to match NLA years\n  mutate(year = factor(year + 1)) %>% \n  \n  # Remove the tmp column\n  select(-tmpcol)\n\nDo the same for urban areas, but first add medium and high urban areas:\n\nurb <- \n  lc_get_data(comid = comids,\n              aoi = 'watershed',\n              metric = 'pcturbmd2006, pcturbmd2011, pcturbmd2016,\n              pcturbhi2006, pcturbhi2011, pcturbhi2016',\n              showAreaSqKm = FALSE) %>% \n  \n  # Add up medium and high urban areas\n  mutate(PCTURB2006WS = PCTURBMD2006WS + PCTURBHI2006WS,\n         PCTURB2011WS = PCTURBMD2011WS + PCTURBHI2011WS,\n         PCTURB2016WS = PCTURBMD2016WS + PCTURBHI2016WS) %>% \n  select(COMID, PCTURB2006WS, PCTURB2011WS, PCTURB2016WS) %>% \n  pivot_longer(!COMID, names_to = 'tmpcol', values_to = 'PCTURBWS') %>% \n  mutate(year = as.integer(\n    str_replace_all(tmpcol, 'PCTURB|WS', ''))) %>% \n  mutate(year = factor(year + 1)) %>% \n  select(-tmpcol)\n\nNow, join the various tables to make our model data:\n\ncond_model_data <- cond_mn %>% \n  left_join(mn_lakecat, join_by(COMID)) %>% \n  left_join(crop, join_by(COMID, year)) %>% \n  left_join(urb, join_by(COMID, year))"
  },
  {
    "objectID": "spatial-lm.html#modeling-lake-conductivity",
    "href": "spatial-lm.html#modeling-lake-conductivity",
    "title": "7  A SLM Application to Lake Conductivity",
    "section": "\n7.2 Modeling lake conductivity",
    "text": "7.2 Modeling lake conductivity\n\n7.2.1 Model formulation\n\nformula <- \n  log(COND_RESULT) ~ \n  AREA_HA + \n  year + \n  TMEAN8110CAT +\n  PRECIP8110WS + \n  PCTCROPWS + \n  PCTURBWS +\n  CAOWS + \n  SWS\n\ncond_mod <- splm(formula = formula,\n                 data = cond_model_data,\n                 spcov_type = 'none')\n\ncond_spmod <- splm(formula = formula,\n                   data = cond_model_data,\n                   spcov_type = 'exponential')\n\nglances(cond_mod, cond_spmod)\n#> # A tibble: 2 × 10\n#>   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#>   <chr>  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>\n#> 1 cond_…   162    10     3  169.  175.  175.  -84.5     152.            0.527\n#> 2 cond_…   162    10     1  293.  295.  295. -146.      152             0.784\n\nsummary(cond_spmod)\n#> \n#> Call:\n#> splm(formula = formula, data = cond_model_data, spcov_type = \"exponential\")\n#> \n#> Residuals:\n#>      Min       1Q   Median       3Q      Max \n#> -1.88665 -0.20309  0.02008  0.27049  1.16722 \n#> \n#> Coefficients (fixed):\n#>                Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept)   8.553e+00  8.679e-01   9.856  < 2e-16 ***\n#> AREA_HA       2.776e-05  5.499e-05   0.505  0.61366    \n#> year2012     -1.274e-01  3.257e-02  -3.912 9.14e-05 ***\n#> year2017     -1.014e-01  3.849e-02  -2.634  0.00843 ** \n#> TMEAN8110CAT  4.811e-01  7.127e-02   6.750 1.48e-11 ***\n#> PRECIP8110WS -8.072e-03  1.313e-03  -6.149 7.81e-10 ***\n#> PCTCROPWS     5.309e-03  2.811e-03   1.889  0.05893 .  \n#> PCTURBWS      1.675e-02  1.276e-02   1.313  0.18932    \n#> CAOWS        -4.172e-02  2.678e-02  -1.558  0.11931    \n#> SWS           1.631e+00  8.093e-01   2.015  0.04393 *  \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Pseudo R-squared: 0.5268\n#> \n#> Coefficients (exponential spatial covariance):\n#>        de        ie     range \n#> 2.588e-01 1.367e-02 2.079e+04\n\n\n7.2.2 Model performance\nNow, let’s the leave-one-out procedure to estimate model performance and produce predicted values and standard errors.\n\nprd_mod <- loocv(cond_mod, se.fit = TRUE, cv_predict = TRUE) \n\nprd_spmod <- loocv(cond_spmod, se.fit = TRUE, cv_predict = TRUE)\n\nbind_rows(prd_mod %>% pluck('stats'),\n      prd_spmod %>% pluck('stats'))\n#> # A tibble: 2 × 4\n#>       bias  MSPE RMSPE  cor2\n#>      <dbl> <dbl> <dbl> <dbl>\n#> 1 -0.00469 0.263 0.513 0.738\n#> 2 -0.00600 0.133 0.364 0.867\n\n\n7.2.3 Map predicted values and standard errors\n\n\n# Combine predictions with model data (spatial points)\ncond_model_data <-\n  cond_model_data %>% \n  mutate(prd_cond = prd_spmod %>% \n           pluck('cv_predict'), \n         se_fit = prd_spmod %>% \n           pluck('se.fit'))\n\n# Map predicted values\nggplot() +\n  geom_sf(data = MN,\n          fill = NA) +\n  geom_sf(data = cond_model_data,\n          aes(color = prd_cond)) +\n  scale_color_distiller(palette = 'YlOrRd', direction = 1) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n\n\n\n# Map standard errors\nggplot() +\n  geom_sf(data = MN,\n          fill = NA) +\n  geom_sf(data = cond_model_data,\n          aes(color = se_fit)) +\n  scale_color_distiller(palette = 'Reds', direction = 1) +\n  theme_bw() +\n  theme(legend.position=\"bottom\")"
  },
  {
    "objectID": "spatial-lm.html#r-code-appendix",
    "href": "spatial-lm.html#r-code-appendix",
    "title": "7  A SLM Application to Lake Conductivity",
    "section": "\n7.3 R Code Appendix",
    "text": "7.3 R Code Appendix\n\n\n\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tigris)\nlibrary(StreamCatTools)\nlibrary(spmodel)\nlibrary(data.sfs2024)\n# Read in states to give some context\nstates <- states(cb = TRUE, progress_bar = FALSE)  %>% \n  filter(!STUSPS %in% c('HI', 'PR', 'AK', 'MP', 'GU', 'AS', 'VI'))  %>% \n  st_transform(crs = 5070)\n\n# Read in lakes, select/massage columns, convert to spatial object\ndata(\"cond_nla_data\")\n\n# Plot sample locations\nggplot() +\n  geom_sf(data = states,\n          fill = NA) +\n  geom_sf(data = cond_nla_data,\n          aes(color = year)) +\n  scale_color_manual(values=c(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\nMN <- states %>% \n  filter(STUSPS == 'MN')\n\ncond_mn <- cond_nla_data %>% \n  st_filter(MN) \n\n# Plot sample locations\nggplot() +\n  geom_sf(data = MN,\n          fill = NA) +\n  geom_sf(data = cond_mn,\n          aes(color = year)) +\n  scale_color_manual(values=c(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n# Plot sample locations\nggplot() +\n  geom_sf(data = MN,\n          fill = NA) +\n  geom_sf(data = cond_mn,\n          aes(color = log(COND_RESULT))) +\n  scale_color_distiller(palette = 'YlOrRd', direction = 1) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\ncomids <- cond_mn$COMID\n\nmn_lakecat <- lc_get_data(comid = comids,\n                          metric = 'Tmean8110, Precip8110,\n                          CaO, S') %>% \n  select(COMID, TMEAN8110CAT, PRECIP8110WS, CAOWS, SWS)\ncrop <- \n  \n  # Grab LakeCat crop data\n  lc_get_data(comid = comids,\n              aoi = 'watershed',\n              metric = 'pctcrop2006, pctcrop2011, pctcrop2016') %>% \n  \n  # Remove watershed area from data\n  select(-WSAREASQKM) %>% \n  \n  # Pivot table to long to create \"year\" column\n  pivot_longer(!COMID, names_to = 'tmpcol', values_to = 'PCTCROPWS') %>% \n  \n  # Remove PCTCROP and WS to make \"year\" column\n  mutate(year = as.integer(\n    str_replace_all(tmpcol, 'PCTCROP|WS', ''))) %>% \n  \n  # Add 1 to each year to match NLA years\n  mutate(year = factor(year + 1)) %>% \n  \n  # Remove the tmp column\n  select(-tmpcol)\nurb <- \n  lc_get_data(comid = comids,\n              aoi = 'watershed',\n              metric = 'pcturbmd2006, pcturbmd2011, pcturbmd2016,\n              pcturbhi2006, pcturbhi2011, pcturbhi2016',\n              showAreaSqKm = FALSE) %>% \n  \n  # Add up medium and high urban areas\n  mutate(PCTURB2006WS = PCTURBMD2006WS + PCTURBHI2006WS,\n         PCTURB2011WS = PCTURBMD2011WS + PCTURBHI2011WS,\n         PCTURB2016WS = PCTURBMD2016WS + PCTURBHI2016WS) %>% \n  select(COMID, PCTURB2006WS, PCTURB2011WS, PCTURB2016WS) %>% \n  pivot_longer(!COMID, names_to = 'tmpcol', values_to = 'PCTURBWS') %>% \n  mutate(year = as.integer(\n    str_replace_all(tmpcol, 'PCTURB|WS', ''))) %>% \n  mutate(year = factor(year + 1)) %>% \n  select(-tmpcol)\ncond_model_data <- cond_mn %>% \n  left_join(mn_lakecat, join_by(COMID)) %>% \n  left_join(crop, join_by(COMID, year)) %>% \n  left_join(urb, join_by(COMID, year))\nformula <- \n  log(COND_RESULT) ~ \n  AREA_HA + \n  year + \n  TMEAN8110CAT +\n  PRECIP8110WS + \n  PCTCROPWS + \n  PCTURBWS +\n  CAOWS + \n  SWS\n\ncond_mod <- splm(formula = formula,\n                 data = cond_model_data,\n                 spcov_type = 'none')\n\ncond_spmod <- splm(formula = formula,\n                   data = cond_model_data,\n                   spcov_type = 'exponential')\n\nglances(cond_mod, cond_spmod)\n\nsummary(cond_spmod)\n\nprd_mod <- loocv(cond_mod, se.fit = TRUE, cv_predict = TRUE) \n\nprd_spmod <- loocv(cond_spmod, se.fit = TRUE, cv_predict = TRUE)\n\nbind_rows(prd_mod %>% pluck('stats'),\n      prd_spmod %>% pluck('stats'))\n\n\n# Combine predictions with model data (spatial points)\ncond_model_data <-\n  cond_model_data %>% \n  mutate(prd_cond = prd_spmod %>% \n           pluck('cv_predict'), \n         se_fit = prd_spmod %>% \n           pluck('se.fit'))\n\n# Map predicted values\nggplot() +\n  geom_sf(data = MN,\n          fill = NA) +\n  geom_sf(data = cond_model_data,\n          aes(color = prd_cond)) +\n  scale_color_distiller(palette = 'YlOrRd', direction = 1) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n# Map standard errors\nggplot() +\n  geom_sf(data = MN,\n          fill = NA) +\n  geom_sf(data = cond_model_data,\n          aes(color = se_fit)) +\n  scale_color_distiller(palette = 'Reds', direction = 1) +\n  theme_bw() +\n  theme(legend.position=\"bottom\")"
  },
  {
    "objectID": "spatial-glm.html#data-prep",
    "href": "spatial-glm.html#data-prep",
    "title": "8  A SPGLM Application to the “Dancer” Damselfly (Argia)",
    "section": "\n8.1 Data Prep",
    "text": "8.1 Data Prep\n\n8.1.1 Biological (Dependent) Data\nNext, we will use finsyncR to get genus-level macroinvert data from just EPA and rarefy to 300 count. The code will also convert the data to occurrence data (1 = detect, 0 = non-detect) and set a seed to make it reproducible. Finally, we will include samples from boatable streams rather than just those that are wadeable.\n\nmacros <- getInvertData(dataType = \"occur\",\n                        taxonLevel = \"Genus\",\n                        agency = \"EPA\",\n                        lifestage = FALSE,\n                        rarefy = TRUE,\n                        rarefyCount = 300,\n                        sharedTaxa = FALSE,\n                        seed = 1,\n                        boatableStreams = T)\n#> \n finsyncR is running: Gathering, joining, and cleaning EPA raw data                    \n finsyncR is running: Rarefying EPA data                              \n finsyncR is running: Applying taxonomic fixes to EPA data                    \n finsyncR is running: Finalizing data for output                          \n finsyncR data synchronization complete\n\nprint(dim(macros))\n#> [1] 6174  856\n\n# Print an example of the data\nkable(macros[1:5, 1:23])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAgency\nSampleID\nProjectLabel\nSiteNumber\nCollectionDate\nCollectionYear\nCollectionMonth\nCollectionDayOfYear\nLatitude_dd\nLongitude_dd\nCoordinateDatum\nCOMID\nStreamOrder\nWettedWidth\nPredictedWettedWidth_m\nNARS_Ecoregion\nSampleTypeCode\nAreaSampTot_m2\nFieldSplitRatio\nLabSubsamplingRatio\nPropID\nGen_ID_Prop\nAblabesmyia\n\n\n\nEPA\n10000\nNRSA0809\nNRS_KS-10018\n2008-08-05\n2008\n8\n218\n39.01491\n-98.01046\nNAD83\n18865370\n2\n2.2525\n2.68\nSPL\nBERWW\n1.022\nNA\nNA\n1.0000000\n0.9373650\n1\n\n\nEPA\n10001\nNRSA0809\nNRS_KS-10008\n2008-08-11\n2008\n8\n224\n37.39528\n-98.92628\nNAD83\n21012349\n3\n4.9850\n5.37\nSPL\nBERWW\n0.372\nNA\nNA\n0.1770852\n0.8576998\n0\n\n\nEPA\n10004\nNRSA0809\nNRS_KS-10040\n2008-07-15\n2008\n7\n197\n37.78662\n-96.42997\nNAD83\n21515712\n4\n10.0800\n9.05\nTPL\nBERWW\n1.022\nNA\nNA\n0.4374453\n0.9310987\n1\n\n\nEPA\n10006\nNRSA0809\nNRS_KS-10064\n2008-08-25\n2008\n8\n238\n37.99323\n-99.32134\nNAD83\n22082845\n7\n4.5150\n9.18\nSPL\nBERWW\n0.186\nNA\nNA\n0.2187705\n0.9659091\n0\n\n\nEPA\n1002013\nNRSA1314\nNRS_KS-10126\n2013-04-30\n2013\n4\n120\n39.12843\n-95.65402\nNAD83\n3645992\n2\n5.5500\n5.18\nTPL\nBERW\n1.022\nNA\nNA\n0.2916983\n0.9026718\n0\n\n\n\n\n\nLet’s massage the table with dplyr to get what we want, including data on the occurences of Argia:\n\nSelect columns of interest, including the Argia occurrence column.\nRemove data related to the EPA’s Wadeable Streams Assessment (2001-2004).\nConvert “CollectionDate” to a date (lubridate::date()) and convert presence/absence to a factor.\nFinally, convert table to a sfobject and transform to EPSG:5070.\n\n\n# Flexible code so we could model another taxon\ngenus <- 'Argia'\n\ntaxon <- macros %>%\n  dplyr::select(SampleID, \n                ProjectLabel, \n                CollectionDate,  \n                Latitude_dd,\n                Longitude_dd,\n                all_of(genus))  %>%\n  mutate(CollectionDate = date(CollectionDate),\n         presence = \n           as.factor(pull(., genus)))  %>% \n  st_as_sf(coords = c('Longitude_dd', 'Latitude_dd'), crs = 4269)  %>% \n  st_transform(crs = 5070)\n\nTo visualize the data, we will read in a layer of lower 48 states to give some context. To do this we can use the tigris package. We will also remove non-conterminous states and transform the projection to our favorite - EPSG:5070.\n\nstates <- tigris::states(cb = TRUE, progress_bar = FALSE)  %>% \n  filter(!STUSPS %in% c('HI', 'PR', 'AK', 'MP', 'GU', 'AS', 'VI'))  %>% \n  st_transform(crs = 5070)\n\nFirst, let’s plot the observed presences/absences in the data…\n\nggplot() + \n  geom_sf(data = states, fill = NA) +\n  geom_sf(data = taxon, \n          aes(color = presence),\n          size = 1.5,\n          alpha = 0.65) + \n  scale_color_manual(values=c(\"#d9d9d9\", \"#08519c\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n\n\n\n…and by NRSA survey period:\n\nggplot() + \n  geom_sf(data = states, fill = NA) +\n  geom_sf(data = taxon, \n          aes(color = ProjectLabel),\n          size = 1.5,\n          alpha = 0.75) + \n  scale_color_manual(values=c(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\", \"#33a02c\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n\n\n\nFor today’s exercise, we’ll narrow down the samples to the northeaster region of the U.S.\n\nSelect states from the northeaster U.S.\nSelect NRSA sample sites that intersect with these states.\nFilter to just the 2013/2014 and 2018/2019 sample periods.\nCreate a new column for sample year.\nSelect desired columns.\n\n\n\n# Filter to study region (states)\nregion <- states %>% \n  filter(STUSPS %in% c('VT', 'NH', 'ME', 'NY', 'RI',\n                       'MA', 'CT', 'NJ', 'PA', 'DE'))\n\n# Use region as spatial filter (sf::st_filter()) for taxon of interest\ntaxon_rg <- taxon %>% \n  st_filter(region) %>% \n  filter(ProjectLabel %in% c('NRSA1314', 'NRSA1819')) %>% \n  mutate(year = year(ymd(CollectionDate))) %>% \n  select(SampleID:CollectionDate, presence:year) \n\nggplot() + \n  geom_sf(data = region, fill = NA) +\n  geom_sf(data = taxon_rg, \n          aes(color = presence)) + \n  scale_color_manual(values=c(\"#d9d9d9\", \"#08519c\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n\n\n\nggplot() + \n  geom_sf(data = region, fill = NA) +\n  geom_sf(data = taxon_rg, \n          aes(color = ProjectLabel)) + \n  scale_color_manual(values=c(\"#1f78b4\", \"#b2df8a\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n\n\n\ntaxon_rg %>% \n  pull(presence) %>% \n  table()\n#> .\n#>   0   1 \n#> 485  65\n\n\n8.1.2 Predictor (Independent) Data\n\nObtain list of NHDPlus COMIDs that match sample sites from nhdplusTools\n\n\n\nUse NLDI service via StreamCat to get the COMIDs\nCreate a vector of COMIDs by splitting the COMID string\nAdd COMID to our Argia occurrence table\n\n\ncomids <- sc_get_comid(taxon_rg)\n\n#comids <- read_rds('./data/nrsa_comids.rds')\ncomid_vect <- \n  comids %>%\n  str_split(',') %>%\n  unlist() %>%\n  as.integer()\n\ntaxon_rg <- \n  taxon_rg %>%\n  mutate(COMID = comid_vect) \n\n\nGet non-varying StreamCat data.\n\n\nsc <- \n  sc_get_data(comid = comids,\n              aoi = 'watershed',\n              metric = 'bfi, precip8110, wetindex, elev',\n              showAreaSqKm = TRUE)\n\n\nGet year-specific wetlands within watersheds.\n\n\nNLCD contains data on the distribution of herbaceous (pcthbwet) and woody (pctwdwet) wetlands. We will combine them into a single metric representing the % of the watershed comprised of wetlands.\nDuplicate the data, but offset by 1 year so we can 2019 NLCD to 2018 observations (same for 2013 NLCD and 2014 NRSA).\n\n\nwetlands <- \n  sc_get_data(comid = comids,\n              aoi = 'watershed',\n              metric = 'pctwdwet2013,pcthbwet2013,pctwdwet2019,pcthbwet2019',\n              showAreaSqKm = FALSE) %>% \n  \n  # Sum wetland types to create single wetlands metric\n  mutate(PCTWETLAND2013WS = PCTHBWET2013WS + PCTWDWET2013WS,\n         PCTWETLAND2019WS = PCTHBWET2019WS + PCTWDWET2019WS) %>% \n  \n  # Reduce columns\n  select(COMID, PCTWETLAND2013WS, PCTWETLAND2019WS) %>% \n  \n  # Create long table w/ column name w/out year\n  pivot_longer(!COMID, names_to = 'tmpcol', values_to = 'PCTWETLANDXXXXWS') %>% \n  \n  # Create new column of year by removing \"PCTWETLAND\" and \"WS\" from names\n  mutate(year = as.integer(str_replace_all(tmpcol, 'PCTWETLAND|WS', ''))) \n\n# But some samples have 2014 and 2018 as sample years? How can we trick the data into joining?\n# We can match 2019 data to 2018 observations by subtracting a year and appending it to the data\n\n# Create tmp table with 1 added or subtracted to year of record\ntmp_wetlands <- wetlands %>% \n  mutate(year = ifelse(year == 2013, year + 1, year - 1))\n\n# rbind() wetlands and tmp_wetlands so we have records to join to 2014 and 2018\nwetlands <- wetlands %>% \n  rbind(tmp_wetlands) %>% \n  select(-tmpcol)\n\n\nYear-specific impervious surfaces within 100-m riparian buffer.\n\n\nriparian_imp <- \n  sc_get_data(comid = comids,\n              aoi = 'riparian_watershed',\n              metric = 'pctimp2013, pctimp2019',\n              showAreaSqKm = FALSE) %>% \n  select(-WSAREASQKMRP100) %>% \n  pivot_longer(!COMID, names_to = 'tmpcol', values_to = 'PCTIMPXXXXWSRP100') %>% \n  mutate(year = as.integer(\n    str_replace_all(tmpcol, 'PCTIMP|WSRP100', '')))\n\ntmp_imp <- riparian_imp %>% \n  mutate(year = ifelse(year == 2013, year + 1, year - 1))\n\nriparian_imp <- riparian_imp %>% \n  rbind(tmp_imp) %>% \n  select(-tmpcol)\n\n\nPRISM air temperatures for sample periods\n\n\nThe prism package requires that we set a temporary folder in our work space. Here, we set it to “prism_data” inside of our “data” folder. It will create this folder if it does not already exist.\nWe then stack the climate rasters and use terra::extract() to\n\n\n# Get these years of PRISM\nyears <- c(2013, 2014, 2018, 2019)\n\n# Set the PRISM directory (creates directory in not present)\nprism_set_dl_dir(\"./data/prism_data\", create = TRUE)\n\n# Download monthly PRISM rasters (tmean)\nget_prism_monthlys('tmean', \n                   years = years, \n                   mon = 7:8, \n                   keepZip = FALSE)\n#> \n  |                                                                         \n  |                                                                   |   0%\n  |                                                                         \n  |========                                                           |  12%\n  |                                                                         \n  |=================                                                  |  25%\n  |                                                                         \n  |=========================                                          |  38%\n  |                                                                         \n  |==================================                                 |  50%\n  |                                                                         \n  |==========================================                         |  62%\n  |                                                                         \n  |==================================================                 |  75%\n  |                                                                         \n  |===========================================================        |  88%\n  |                                                                         \n  |===================================================================| 100%\n\n# Create stack of downloaded PRISM rasters\ntmn <- pd_stack((prism_archive_subset(\"tmean\",\"monthly\", \n                                      years = years, \n                                      mon = 7:8)))\n\n# Extract tmean at sample points and massage data\ntmn <- terra::extract(tmn, \n                      # Transform taxon_rg to CRS of PRISM on the fly\n                      taxon_rg %>% \n                        st_transform(crs = st_crs(tmn))) %>%\n  \n  # Add COMIDs to extracted values\n  data.frame(COMID = comid_vect, .) %>%\n  \n  # Remove front and back text from PRISM year/month in names\n  rename_with( ~ stringr::str_replace_all(., 'PRISM_tmean_stable_4kmM3_|_bil', '')) %>% \n  \n  # Pivot to long table and calle column TMEANPRISMXXXXPT, XXXX indicates year\n  pivot_longer(!COMID, names_to = 'year_month', \n               values_to = 'TMEANPRISMXXXXPT') %>% \n  \n  # Create new column of year\n  mutate(year = year(ym(year_month))) %>% \n  \n  # Average July and August temperatures \n  summarise(TMEANPRISMXXXXPT = mean(TMEANPRISMXXXXPT, na.rm = TRUE), \n            .by = c(COMID, year))\n\n\n8.1.3 Combine Dependent and Independent Data\n\nargia_model_data <-\n  taxon_rg %>%\n  left_join(sc, join_by(COMID)) %>%\n  left_join(wetlands, join_by(COMID, year)) %>%\n  left_join(riparian_imp, join_by(COMID, year)) %>%\n  left_join(tmn, join_by(COMID, year)) %>%\n  drop_na()\n\ncor(argia_model_data %>%\n      st_drop_geometry() %>%\n      select(WSAREASQKM:TMEANPRISMXXXXPT))\n#>                    WSAREASQKM      ELEVWS WETINDEXWS       BFIWS\n#> WSAREASQKM         1.00000000  0.19649723 -0.0844127 -0.17679333\n#> ELEVWS             0.19649723  1.00000000 -0.6020139 -0.56349466\n#> WETINDEXWS        -0.08441270 -0.60201389  1.0000000  0.40544326\n#> BFIWS             -0.17679333 -0.56349466  0.4054433  1.00000000\n#> PRECIP8110WS      -0.15455456 -0.02973549 -0.1213487  0.17231568\n#> PCTWETLANDXXXXWS  -0.13274790 -0.53982414  0.7838752  0.49003820\n#> PCTIMPXXXXWSRP100 -0.10603160 -0.39811621  0.1008221  0.07181972\n#> TMEANPRISMXXXXPT   0.08241251 -0.68038439  0.3688678  0.25976247\n#>                   PRECIP8110WS PCTWETLANDXXXXWS PCTIMPXXXXWSRP100\n#> WSAREASQKM         -0.15455456      -0.13274790       -0.10603160\n#> ELEVWS             -0.02973549      -0.53982414       -0.39811621\n#> WETINDEXWS         -0.12134865       0.78387523        0.10082210\n#> BFIWS               0.17231568       0.49003820        0.07181972\n#> PRECIP8110WS        1.00000000       0.03862313        0.17634436\n#> PCTWETLANDXXXXWS    0.03862313       1.00000000       -0.04885782\n#> PCTIMPXXXXWSRP100   0.17634436      -0.04885782        1.00000000\n#> TMEANPRISMXXXXPT    0.04030682       0.24384288        0.43121267\n#>                   TMEANPRISMXXXXPT\n#> WSAREASQKM              0.08241251\n#> ELEVWS                 -0.68038439\n#> WETINDEXWS              0.36886778\n#> BFIWS                   0.25976247\n#> PRECIP8110WS            0.04030682\n#> PCTWETLANDXXXXWS        0.24384288\n#> PCTIMPXXXXWSRP100       0.43121267\n#> TMEANPRISMXXXXPT        1.00000000"
  },
  {
    "objectID": "spatial-glm.html#modeling-occurrence-of-genus-argia",
    "href": "spatial-glm.html#modeling-occurrence-of-genus-argia",
    "title": "8  A SPGLM Application to the “Dancer” Damselfly (Argia)",
    "section": "\n8.2 Modeling occurrence of genus Argia\n",
    "text": "8.2 Modeling occurrence of genus Argia\n\n\n8.2.1 Model formulation\n\nformula <-\n  presence ~\n  I(log10(WSAREASQKM)) +\n  ELEVWS +\n  WETINDEXWS +\n  BFIWS +\n  PRECIP8110WS +\n  PCTWETLANDXXXXWS +\n  PCTIMPXXXXWSRP100 +\n  TMEANPRISMXXXXPT\n\nbin_mod <- spglm(formula = formula,\n                 data = argia_model_data,\n                 family = 'binomial',\n                 spcov_type = 'none')\n\nbin_spmod <- spglm(formula = formula,\n                   data = argia_model_data,\n                   family = 'binomial',\n                   spcov_type = 'exponential')\n\nglances(bin_mod, bin_spmod)\n#> # A tibble: 2 × 10\n#>   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#>   <chr>  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>\n#> 1 bin_s…   550     9     3 1394. 1400. 1400.  -697.     201.            0.110\n#> 2 bin_m…   550     9     1 1409. 1411. 1411.  -704.     342.            0.145\n\nsummary(bin_spmod)\n#> \n#> Call:\n#> spglm(formula = formula, family = \"binomial\", data = argia_model_data, \n#>     spcov_type = \"exponential\")\n#> \n#> Deviance Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -1.4692 -0.4226 -0.2762 -0.1450  2.4044 \n#> \n#> Coefficients (fixed):\n#>                       Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept)           8.089431   6.729301   1.202   0.2293    \n#> I(log10(WSAREASQKM))  0.808323   0.202435   3.993 6.52e-05 ***\n#> ELEVWS               -0.006700   0.002643  -2.535   0.0112 *  \n#> WETINDEXWS            0.003059   0.004851   0.631   0.5283    \n#> BFIWS                -0.032951   0.042665  -0.772   0.4399    \n#> PRECIP8110WS         -0.003344   0.002894  -1.156   0.2478    \n#> PCTWETLANDXXXXWS     -0.016386   0.048407  -0.339   0.7350    \n#> PCTIMPXXXXWSRP100     0.088456   0.047796   1.851   0.0642 .  \n#> TMEANPRISMXXXXPT     -0.348964   0.149201  -2.339   0.0193 *  \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Pseudo R-squared: 0.1101\n#> \n#> Coefficients (exponential spatial covariance):\n#>        de        ie     range \n#> 3.121e+00 9.212e-03 3.636e+04 \n#> \n#> Coefficients (Dispersion for binomial family):\n#> dispersion \n#>          1\n\n\n8.2.2 Model performance\n\n# Function to convert from log odds to probability\nto_prob <- function(x) exp(x)/(1+exp(x))\n\n\nloocv_mod <- loocv(bin_mod, cv_predict = TRUE, se.fit = TRUE) \nprob_mod <- to_prob(loocv_mod$cv_predict)\nsefit_mod <- loocv_mod$se.fit\n\nloocv_spmod <- loocv(bin_spmod, cv_predict = TRUE, se.fit = TRUE)\nprob_spmod <- to_prob(loocv_spmod$cv_predict)\nsefit_spmod <- loocv_spmod$se.fit\n\npROC::auc(argia_model_data$presence, prob_mod)\n#> Area under the curve: 0.7908\npROC::auc(argia_model_data$presence, prob_spmod)\n#> Area under the curve: 0.9154\n\nargia_model_data <- argia_model_data %>%\n  mutate(prob_spmod = prob_spmod,\n         sefit_spmod = sefit_spmod)\n\nggplot() +\n  geom_sf(data = region, fill = NA) +\n  geom_sf(data = argia_model_data,\n          aes(color = prob_spmod)) +\n  scale_color_viridis_b() +\n  theme_bw() +\n  theme(legend.position=\"bottom\")\n\n\n\n\nggplot() +\n  geom_sf(data = region, fill = NA) +\n  geom_sf(data = argia_model_data,\n          aes(color = sefit_spmod)) +\n  scale_color_distiller(palette = 'Reds', direction = 1) +\n  theme_bw() +\n  theme(legend.position=\"bottom\")\n\n\n\n\n\n8.2.3 EXTRA: Mapping predictions\n\nstate <- region %>% \n  filter(STUSPS == \"NJ\") %>% \n  st_transform(crs = 4326)\n\n# Use get_nhdplus to access the individual stream sub-catchments\npourpoints <- \n  nhdplusTools::get_nhdplus(AOI = state,\n                            realization = 'outlet') |> \n  filter(flowdir == \"With Digitized\")\n\nsc_prd <- sc_get_data(state = 'NJ',\n                      aoi = 'watershed,riparian_watershed',\n                      metric = 'bfi,precip8110,wetindex,elev,pctwdwet2019,pcthbwet2019,pctimp2019') |> \n  mutate(PCTWETLANDXXXXWS = PCTWDWET2019WS + PCTHBWET2019WS) |> \n  rename(PCTIMPXXXXWSRP100 = PCTIMP2019WSRP100) |> \n  select(COMID, WSAREASQKM, ELEVWS, WETINDEXWS, BFIWS, \n         PRECIP8110WS, PCTWETLANDXXXXWS, PCTIMPXXXXWSRP100)\n\ntmn_prd <- \n  pd_stack((prism_archive_subset(\"tmean\",\"monthly\", \n                                 years = 2019, \n                                 mon = 7:8)))\ntmn_prd <-\n  terra::extract(tmn_prd, \n                 pourpoints %>% \n                   st_transform(crs = st_crs(tmn_prd))) |> \n  as.tibble() |> \n  mutate(COMID = pourpoints$comid,\n         TMEANPRISMXXXXPT = (PRISM_tmean_stable_4kmM3_201907_bil + PRISM_tmean_stable_4kmM3_201908_bil)/2) |> \n  select(COMID, TMEANPRISMXXXXPT)\n\nargia_pred_data <- sc_prd |> \n  left_join(tmn_prd, join_by(COMID)) |>\n  left_join(pourpoints, join_by(COMID == comid)) |> \n  st_as_sf() |>\n  st_transform(crs = 5070) |>\n  select(COMID, WSAREASQKM, ELEVWS, WETINDEXWS,\n         BFIWS, PRECIP8110WS, PCTWETLANDXXXXWS,\n         PCTIMPXXXXWSRP100, TMEANPRISMXXXXPT) |> \n  na.omit() \n\nargia_predict <- \n  augment(bin_spmod, \n          newdata = argia_pred_data,\n          type = 'response',\n          se_fit = TRUE,\n          local = TRUE) \n\nggplot() +\n  geom_sf(data = argia_predict,\n          aes(color = .fitted),\n          size = 0.9) +\n  scale_color_distiller(palette = 'YlOrRd', direction = 2) +\n  theme_bw()\n\n\n\n\nggplot() +\n  geom_sf(data = argia_predict,\n          aes(color = .se.fit),\n          size = 0.9) +\n  scale_color_distiller(palette = 'YlOrRd', direction = 2) +\n  theme_bw()"
  },
  {
    "objectID": "spatial-glm.html#r-code-appendix",
    "href": "spatial-glm.html#r-code-appendix",
    "title": "8  A SPGLM Application to the “Dancer” Damselfly (Argia)",
    "section": "\n8.3 R Code Appendix",
    "text": "8.3 R Code Appendix\n\n\n\n\nlibrary(finsyncR)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tigris)\nlibrary(StreamCatTools)\nlibrary(nhdplusTools)\nlibrary(spmodel)\nlibrary(data.table)\nlibrary(pROC)\nlibrary(knitr)\nlibrary(prism)\nmacros <- getInvertData(dataType = \"occur\",\n                        taxonLevel = \"Genus\",\n                        agency = \"EPA\",\n                        lifestage = FALSE,\n                        rarefy = TRUE,\n                        rarefyCount = 300,\n                        sharedTaxa = FALSE,\n                        seed = 1,\n                        boatableStreams = T)\n\nprint(dim(macros))\n\n# Print an example of the data\nkable(macros[1:5, 1:23])\n# Flexible code so we could model another taxon\ngenus <- 'Argia'\n\ntaxon <- macros %>%\n  dplyr::select(SampleID, \n                ProjectLabel, \n                CollectionDate,  \n                Latitude_dd,\n                Longitude_dd,\n                all_of(genus))  %>%\n  mutate(CollectionDate = date(CollectionDate),\n         presence = \n           as.factor(pull(., genus)))  %>% \n  st_as_sf(coords = c('Longitude_dd', 'Latitude_dd'), crs = 4269)  %>% \n  st_transform(crs = 5070)\nstates <- tigris::states(cb = TRUE, progress_bar = FALSE)  %>% \n  filter(!STUSPS %in% c('HI', 'PR', 'AK', 'MP', 'GU', 'AS', 'VI'))  %>% \n  st_transform(crs = 5070)\nggplot() + \n  geom_sf(data = states, fill = NA) +\n  geom_sf(data = taxon, \n          aes(color = presence),\n          size = 1.5,\n          alpha = 0.65) + \n  scale_color_manual(values=c(\"#d9d9d9\", \"#08519c\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \nggplot() + \n  geom_sf(data = states, fill = NA) +\n  geom_sf(data = taxon, \n          aes(color = ProjectLabel),\n          size = 1.5,\n          alpha = 0.75) + \n  scale_color_manual(values=c(\"#a6cee3\", \"#1f78b4\", \"#b2df8a\", \"#33a02c\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\n# Filter to study region (states)\nregion <- states %>% \n  filter(STUSPS %in% c('VT', 'NH', 'ME', 'NY', 'RI',\n                       'MA', 'CT', 'NJ', 'PA', 'DE'))\n\n# Use region as spatial filter (sf::st_filter()) for taxon of interest\ntaxon_rg <- taxon %>% \n  st_filter(region) %>% \n  filter(ProjectLabel %in% c('NRSA1314', 'NRSA1819')) %>% \n  mutate(year = year(ymd(CollectionDate))) %>% \n  select(SampleID:CollectionDate, presence:year) \n\nggplot() + \n  geom_sf(data = region, fill = NA) +\n  geom_sf(data = taxon_rg, \n          aes(color = presence)) + \n  scale_color_manual(values=c(\"#d9d9d9\", \"#08519c\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\nggplot() + \n  geom_sf(data = region, fill = NA) +\n  geom_sf(data = taxon_rg, \n          aes(color = ProjectLabel)) + \n  scale_color_manual(values=c(\"#1f78b4\", \"#b2df8a\")) +\n  theme_bw() +\n  theme(legend.position=\"bottom\") \n\ntaxon_rg %>% \n  pull(presence) %>% \n  table()\ncomids <- sc_get_comid(taxon_rg)\n\n#comids <- read_rds('./data/nrsa_comids.rds')\ncomid_vect <- \n  comids %>%\n  str_split(',') %>%\n  unlist() %>%\n  as.integer()\n\ntaxon_rg <- \n  taxon_rg %>%\n  mutate(COMID = comid_vect) \nsc <- \n  sc_get_data(comid = comids,\n              aoi = 'watershed',\n              metric = 'bfi, precip8110, wetindex, elev',\n              showAreaSqKm = TRUE)\nwetlands <- \n  sc_get_data(comid = comids,\n              aoi = 'watershed',\n              metric = 'pctwdwet2013,pcthbwet2013,pctwdwet2019,pcthbwet2019',\n              showAreaSqKm = FALSE) %>% \n  \n  # Sum wetland types to create single wetlands metric\n  mutate(PCTWETLAND2013WS = PCTHBWET2013WS + PCTWDWET2013WS,\n         PCTWETLAND2019WS = PCTHBWET2019WS + PCTWDWET2019WS) %>% \n  \n  # Reduce columns\n  select(COMID, PCTWETLAND2013WS, PCTWETLAND2019WS) %>% \n  \n  # Create long table w/ column name w/out year\n  pivot_longer(!COMID, names_to = 'tmpcol', values_to = 'PCTWETLANDXXXXWS') %>% \n  \n  # Create new column of year by removing \"PCTWETLAND\" and \"WS\" from names\n  mutate(year = as.integer(str_replace_all(tmpcol, 'PCTWETLAND|WS', ''))) \n\n# But some samples have 2014 and 2018 as sample years? How can we trick the data into joining?\n# We can match 2019 data to 2018 observations by subtracting a year and appending it to the data\n\n# Create tmp table with 1 added or subtracted to year of record\ntmp_wetlands <- wetlands %>% \n  mutate(year = ifelse(year == 2013, year + 1, year - 1))\n\n# rbind() wetlands and tmp_wetlands so we have records to join to 2014 and 2018\nwetlands <- wetlands %>% \n  rbind(tmp_wetlands) %>% \n  select(-tmpcol)\nriparian_imp <- \n  sc_get_data(comid = comids,\n              aoi = 'riparian_watershed',\n              metric = 'pctimp2013, pctimp2019',\n              showAreaSqKm = FALSE) %>% \n  select(-WSAREASQKMRP100) %>% \n  pivot_longer(!COMID, names_to = 'tmpcol', values_to = 'PCTIMPXXXXWSRP100') %>% \n  mutate(year = as.integer(\n    str_replace_all(tmpcol, 'PCTIMP|WSRP100', '')))\n\ntmp_imp <- riparian_imp %>% \n  mutate(year = ifelse(year == 2013, year + 1, year - 1))\n\nriparian_imp <- riparian_imp %>% \n  rbind(tmp_imp) %>% \n  select(-tmpcol)\n# Get these years of PRISM\nyears <- c(2013, 2014, 2018, 2019)\n\n# Set the PRISM directory (creates directory in not present)\nprism_set_dl_dir(\"./data/prism_data\", create = TRUE)\n\n# Download monthly PRISM rasters (tmean)\nget_prism_monthlys('tmean', \n                   years = years, \n                   mon = 7:8, \n                   keepZip = FALSE)\n\n# Create stack of downloaded PRISM rasters\ntmn <- pd_stack((prism_archive_subset(\"tmean\",\"monthly\", \n                                      years = years, \n                                      mon = 7:8)))\n\n# Extract tmean at sample points and massage data\ntmn <- terra::extract(tmn, \n                      # Transform taxon_rg to CRS of PRISM on the fly\n                      taxon_rg %>% \n                        st_transform(crs = st_crs(tmn))) %>%\n  \n  # Add COMIDs to extracted values\n  data.frame(COMID = comid_vect, .) %>%\n  \n  # Remove front and back text from PRISM year/month in names\n  rename_with( ~ stringr::str_replace_all(., 'PRISM_tmean_stable_4kmM3_|_bil', '')) %>% \n  \n  # Pivot to long table and calle column TMEANPRISMXXXXPT, XXXX indicates year\n  pivot_longer(!COMID, names_to = 'year_month', \n               values_to = 'TMEANPRISMXXXXPT') %>% \n  \n  # Create new column of year\n  mutate(year = year(ym(year_month))) %>% \n  \n  # Average July and August temperatures \n  summarise(TMEANPRISMXXXXPT = mean(TMEANPRISMXXXXPT, na.rm = TRUE), \n            .by = c(COMID, year))\nargia_model_data <-\n  taxon_rg %>%\n  left_join(sc, join_by(COMID)) %>%\n  left_join(wetlands, join_by(COMID, year)) %>%\n  left_join(riparian_imp, join_by(COMID, year)) %>%\n  left_join(tmn, join_by(COMID, year)) %>%\n  drop_na()\n\ncor(argia_model_data %>%\n      st_drop_geometry() %>%\n      select(WSAREASQKM:TMEANPRISMXXXXPT))\n\nformula <-\n  presence ~\n  I(log10(WSAREASQKM)) +\n  ELEVWS +\n  WETINDEXWS +\n  BFIWS +\n  PRECIP8110WS +\n  PCTWETLANDXXXXWS +\n  PCTIMPXXXXWSRP100 +\n  TMEANPRISMXXXXPT\n\nbin_mod <- spglm(formula = formula,\n                 data = argia_model_data,\n                 family = 'binomial',\n                 spcov_type = 'none')\n\nbin_spmod <- spglm(formula = formula,\n                   data = argia_model_data,\n                   family = 'binomial',\n                   spcov_type = 'exponential')\n\nglances(bin_mod, bin_spmod)\n\nsummary(bin_spmod)\n# Function to convert from log odds to probability\nto_prob <- function(x) exp(x)/(1+exp(x))\n\n\nloocv_mod <- loocv(bin_mod, cv_predict = TRUE, se.fit = TRUE) \nprob_mod <- to_prob(loocv_mod$cv_predict)\nsefit_mod <- loocv_mod$se.fit\n\nloocv_spmod <- loocv(bin_spmod, cv_predict = TRUE, se.fit = TRUE)\nprob_spmod <- to_prob(loocv_spmod$cv_predict)\nsefit_spmod <- loocv_spmod$se.fit\n\npROC::auc(argia_model_data$presence, prob_mod)\npROC::auc(argia_model_data$presence, prob_spmod)\n\nargia_model_data <- argia_model_data %>%\n  mutate(prob_spmod = prob_spmod,\n         sefit_spmod = sefit_spmod)\n\nggplot() +\n  geom_sf(data = region, fill = NA) +\n  geom_sf(data = argia_model_data,\n          aes(color = prob_spmod)) +\n  scale_color_viridis_b() +\n  theme_bw() +\n  theme(legend.position=\"bottom\")\n\nggplot() +\n  geom_sf(data = region, fill = NA) +\n  geom_sf(data = argia_model_data,\n          aes(color = sefit_spmod)) +\n  scale_color_distiller(palette = 'Reds', direction = 1) +\n  theme_bw() +\n  theme(legend.position=\"bottom\")\nstate <- region %>% \n  filter(STUSPS == \"NJ\") %>% \n  st_transform(crs = 4326)\n\n# Use get_nhdplus to access the individual stream sub-catchments\npourpoints <- \n  nhdplusTools::get_nhdplus(AOI = state,\n                            realization = 'outlet') |> \n  filter(flowdir == \"With Digitized\")\n\nsc_prd <- sc_get_data(state = 'NJ',\n                      aoi = 'watershed,riparian_watershed',\n                      metric = 'bfi,precip8110,wetindex,elev,pctwdwet2019,pcthbwet2019,pctimp2019') |> \n  mutate(PCTWETLANDXXXXWS = PCTWDWET2019WS + PCTHBWET2019WS) |> \n  rename(PCTIMPXXXXWSRP100 = PCTIMP2019WSRP100) |> \n  select(COMID, WSAREASQKM, ELEVWS, WETINDEXWS, BFIWS, \n         PRECIP8110WS, PCTWETLANDXXXXWS, PCTIMPXXXXWSRP100)\n\ntmn_prd <- \n  pd_stack((prism_archive_subset(\"tmean\",\"monthly\", \n                                 years = 2019, \n                                 mon = 7:8)))\ntmn_prd <-\n  terra::extract(tmn_prd, \n                 pourpoints %>% \n                   st_transform(crs = st_crs(tmn_prd))) |> \n  as.tibble() |> \n  mutate(COMID = pourpoints$comid,\n         TMEANPRISMXXXXPT = (PRISM_tmean_stable_4kmM3_201907_bil + PRISM_tmean_stable_4kmM3_201908_bil)/2) |> \n  select(COMID, TMEANPRISMXXXXPT)\n\nargia_pred_data <- sc_prd |> \n  left_join(tmn_prd, join_by(COMID)) |>\n  left_join(pourpoints, join_by(COMID == comid)) |> \n  st_as_sf() |>\n  st_transform(crs = 5070) |>\n  select(COMID, WSAREASQKM, ELEVWS, WETINDEXWS,\n         BFIWS, PRECIP8110WS, PCTWETLANDXXXXWS,\n         PCTIMPXXXXWSRP100, TMEANPRISMXXXXPT) |> \n  na.omit() \n\nargia_predict <- \n  augment(bin_spmod, \n          newdata = argia_pred_data,\n          type = 'response',\n          se_fit = TRUE,\n          local = TRUE) \n\nggplot() +\n  geom_sf(data = argia_predict,\n          aes(color = .fitted),\n          size = 0.9) +\n  scale_color_distiller(palette = 'YlOrRd', direction = 2) +\n  theme_bw()\n\nggplot() +\n  geom_sf(data = argia_predict,\n          aes(color = .se.fit),\n          size = 0.9) +\n  scale_color_distiller(palette = 'YlOrRd', direction = 2) +\n  theme_bw()"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Akaike, Hirotugu. 1974. “A New Look at the Statistical Model\nIdentification.” IEEE Transactions on Automatic Control\n19 (6): 716–23.\n\n\nBates, Douglas, Martin Mächler, Ben Bolker, and Steve Walker. 2015.\n“Fitting Linear Mixed-Effects Models Using lme4.” Journal of Statistical\nSoftware 67 (1): 1–48. https://doi.org/10.18637/jss.v067.i01.\n\n\nBrus, Dick J. 2021. “Statistical Approaches for Spatial Sample\nSurvey: Persistent Misconceptions and New Developments.”\nEuropean Journal of Soil Science 72 (2): 686–703.\n\n\nCressie, Noel. 1985. “Fitting Variogram Models by Weighted Least\nSquares.” Journal of the International Association for\nMathematical Geology 17 (5): 563–86.\n\n\nCurriero, Frank C, and Subhash Lele. 1999. “A Composite Likelihood\nApproach to Semivariogram Estimation.” Journal of\nAgricultural, Biological, and Environmental Statistics, 9–28.\n\n\nDumelle, Michael, Matt Higham, and Jay M. Ver Hoef. 2023. “spmodel: Spatial Statistical Modeling and\nPrediction in R.” PLOS ONE 18 (3): 1–32. https://doi.org/10.1371/journal.pone.0282524.\n\n\nDumelle, Michael, Matt Higham, Jay M Ver Hoef, Anthony R Olsen, and Lisa\nMadsen. 2022. “A Comparison of Design-Based and Model-Based\nApproaches for Finite Population Spatial Sampling and Inference.”\nMethods in Ecology and Evolution 13 (9): 2018–29.\n\n\nHastie, Trevor, Robert Tibshirani, Jerome H Friedman, and Jerome H\nFriedman. 2009. The Elements of Statistical Learning: Data Mining,\nInference, and Prediction. Vol. 2. Springer.\n\n\nJohnson, Jerald B, and Kristian S Omland. 2004. “Model Selection\nin Ecology and Evolution.” Trends in Ecology &\nEvolution 19 (2): 101–8.\n\n\nPebesma, Edzer. 2018. “Simple Features for R:\nStandardized Support for Spatial Vector Data.”\nThe R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPinheiro, José, and Douglas Bates. 2006. Mixed-Effects Models in\nS and S-PLUS. Springer science &\nbusiness media.\n\n\nVer Hoef, Jay M, Eryn Blagg, Michael Dumelle, Philip M Dixon, Dale L\nZimmerman, and Paul Conn. 2023. “Marginal Inference for\nHierarchical Generalized Linear Mixed Models with Patterned Covariance\nMatrices Using the Laplace Approximation.” arXiv Preprint\narXiv:2305.02978.\n\n\nVer Hoef, Jay M, Michael Dumelle, Matt Higham, Erin E Peterson, and\nDaniel J Isaak. 2023. “Indexing and Partitioning the Spatial\nLinear Model for Large Data Sets.” Plos One 18 (11):\ne0291906.\n\n\nVer Hoef, Jay M, Erin E Peterson, Mevin B Hooten, Ephraim M Hanks, and\nMarie-Josèe Fortin. 2018. “Spatial Autoregressive Models for\nStatistical Inference from Ecological Data.” Ecological\nMonographs 88 (1): 36–59.\n\n\nZimmerman, Dale L, and Jay M Ver Hoef. 2024. Spatial Linear Models\nfor Environmental Data. CRC Press.\n\n\nZuur, Alain F, Elena N Ieno, Neil J Walker, Anatoly A Saveliev, Graham M\nSmith, et al. 2009. Mixed Effects Models and Extensions in Ecology\nwith r. Vol. 574. Springer."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatial Analysis and Statistical Modeling with R and spmodel",
    "section": "",
    "text": "Welcome\nHello 👋 and welcome! The purpose of this website is to provide workshop materials for the “Spatial Analysis and Statistical Modeling with R and spmodel” workshop at the 2024 Society for Freshwater Science Conference in Philadelphia, PA, USA. To view the workshop’s accompanying workbook, visit here. To download the workshop’s slides, visit here. Slides are downloaded by clicking the “Download raw file” button via the ellipsis or downward arrow symbol on the right side of the screen.\nIt is our hope that this workshop will provide attendees with the conceptual and practical knowledge to incorporate geospatial analyses into their R workflow to improve the interpretation of spatial data. In particular, this workshop will focus on the R package spmodel.\nWhat is spmodel? The spmodel R package (Dumelle, Higham, and Ver Hoef 2023) can be used to fit, summarize, and predict for a variety of spatial statistical models. Some of the things that spmodel can do include:\nWhy use spmodel? There are many great spatial modeling packages in R. A few reasons to use spmodel for spatial analysis are that:\nThroughout the rest of these materials, we introduce spmodel through a few applied examples. We connect basic summary output with the spatial linear model for both point-referenced and areal (lattice) data. We discuss prediction and generalized linear spatial models for response variables whose distribution is not Gaussian. Along the way, we mention a few other advanced spmodel features. Then we show how to use spmodel to analyze several real freshwater data sets.\nWorkshop Summary. The spmodel R package can be used to fit, summarize, and predict for a variety of spatial statistical models for both point-referenced and areal spatial data. What distinguishes spmodel from many other R packages for modeling spatial data is (1) a syntactic structure similar to the syntactic structure of base R functions lm() and glm() that makes spmodel relatively easy to learn, (2) the breadth of options that give the user a high amount of control over the model being fit, and (3) compatibility with other modern R packages like broom and sf. By the end of this workshop, participants can expect to be able to use spmodel to fit spatial linear models for point-referenced and areal (lattice) data, make predictions for unobserved spatial locations, fit anisotropic models for point-referenced data, fit spatial models with additional non-spatial random effects, fit generalized linear models for spatial data, and use big data methods to analyze large spatial data sets. More information on spmodel can be found on our website at https://usepa.github.io/spmodel/."
  },
  {
    "objectID": "index.html#workshop-agenda",
    "href": "index.html#workshop-agenda",
    "title": "Spatial Analysis and Statistical Modeling with R and spmodel",
    "section": "Workshop Agenda",
    "text": "Workshop Agenda\n\n9:00am - 9:30am ET: Introductions and Motivating Examples\n9:30am - 11:30am ET: Spatial Modeling in R\n\n11:30am - 12:30pm ET: Geospatial Analysis in R\n\n12:30pm - 1:30pm ET: Lunch\n1:30pm - 2:30pm ET: Geospatial Analysis in R\n\n2:30pm - 3:30pm ET: Applications to Real Aquatic Data\n3:30pm - 4:00pm ET: Questions and Wrap Up"
  },
  {
    "objectID": "index.html#author-introduction",
    "href": "index.html#author-introduction",
    "title": "Spatial Analysis and Statistical Modeling with R and spmodel",
    "section": "Author Introduction",
    "text": "Author Introduction\nMichael Dumelle (he/him/his) is a statistician for the United States Environmental Protection Agency (USEPA). He works primarily on facilitating the survey design and analysis of USEPA’s National Aquatic Resource Surveys (NARS), which characterize the condition of waters across the United States. His primary research interests are in spatial statistics, survey design, environmental and ecological applications, and software development.\nRyan Hill (he/him/his) is an aquatic ecologist with the U.S. EPA Office of Research and Development. He is interested in how watershed conditions drive differences in freshwater diversity and water quality across the United States. He has worked extensively with federal physical, chemical, and biological datasets to gain insights into the factors affecting water quality and biotic condition of freshwaters across the conterminous US. He has also worked to develop and distribute large datasets of geospatial watershed metrics of streams and lakes for the Agency (EPA’s StreamCat and LakeCat datasets)."
  },
  {
    "objectID": "index.html#support-introduction",
    "href": "index.html#support-introduction",
    "title": "Spatial Analysis and Statistical Modeling with R and spmodel",
    "section": "Support Introduction",
    "text": "Support Introduction\nLara Jansen (she/her/hers) is an aquatic community ecologist and an ORISE postdoctoral fellow working on predictive models of benthic macroinvertebrate communities across the conterminous US in relation to watershed factors. Lara completed her PhD in Environmental Science at Portland State University in 2023, studying the drivers and dynamics of harmful algal blooms in mountain lakes with Dr. Angela Strecker.She obtained a MS in Natural Resource Sciences at Cal Poly Humboldt University with a thesis focused on the downstream impacts of dam flow regulation on benthic macroinvertebrate and algal communities.\nWade Boys (he/him/his) is a graduate student at the University of Arkansas broadly interested in understanding how aquatic ectotherms will respond to climate change, especially the role of phenotypic plasticity in adapting to a warming world. Wade is a firm believer that science is not finished until it is communicated. In addition to research, he finds great purpose in cultivating community and connecting science to our everyday experiences as humans."
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Spatial Analysis and Statistical Modeling with R and spmodel",
    "section": "Setup",
    "text": "Setup\nInstall R and RTools\nPrior to the start of the workshop everyone will need to have the software installed and tested. You will need to have R, Rtools, and RStudio. Please install at least R version >= 4.0 and the compatible version of RTools.RTools will be necessary to install non-CRAN repositories from GitHub (see below).\nInstall RStudio\nThere are many graphical user interfaces (GUIs) that make it easier to interact with R. We recommend using Posit’s RStudio](https://posit.co/products/open-source/rstudio/).\nInstall R Packages\nThe packages that we use throughout this workshop are listed below. To install them run:\nCommon Packages\n\ninstall.packages('tidyverse')\ninstall.packages('ggplot2')\ninstall.packages('data.table')\ninstall.packages('tictoc')\ninstall.packages(\"remotes\")\ninstall.packages(\"devtools\")\n\nGeospatial Packages\nIn addition to these core R packages, we’ll be using several CRAN packages specifically developed for GIS tasks or handling/obtaining spatial data:\n\ninstall.packages('sf')\ninstall.packages('terra')\ninstall.packages('prism')\ninstall.packages('tigris')\ninstall.packages('nhdplusTools')\ninstall.packages('mapview')\ninstall.packages('FedData')\ninstall.packages('tidyterra')\ninstall.packages('jsonlite')\ninstall.packages('geojson')\ninstall.packages('geojsonio')\ninstall.packages('maps')\n\nNew EPA Packages\nFinally, we will use three new R packages developed by researchers at the U.S. Environmental Protection Agency. The package spmodel, in particular, will form the basis of this workshop.\nspmodel - The spmodel package is the basis of this workshop.\n\n\n\n\nStreamCatTools - The StreamCatTools package retrieves StreamCat and LakeCat data via an API.\n\n\n\n\nfinsyncR - The finsyncR package greatly facilitates the retrieval and harmonization of EPA and USGS stream macroinvertebrate and fish data.\n\n\n\n\nTo install these packages:\n\n# Install spmodel from CRAN\ninstall.packages('spmodel')\n\n# Install remotes package to allow GitHub installation of finsyncR and StreamCatTools\nremotes::install_github('USEPA/finsyncR')\nremotes::install_github('USEPA/StreamCatTools')\n\nLastly, we have created an R package for this workshop that contains some data we will work with today. To install, run\n\nremotes::install_github('USEPA/spdata.sfs24')\n\nrlang    (1.1.1  -> 1.1.3 ) [CRAN]\nglue     (1.6.2  -> 1.7.0 ) [CRAN]\ncli      (3.6.1  -> 3.6.2 ) [CRAN]\nutf8     (1.2.3  -> 1.2.4 ) [CRAN]\nfansi    (1.0.4  -> 1.0.6 ) [CRAN]\nRcpp     (1.0.10 -> 1.0.12) [CRAN]\ne1071    (1.7-13 -> 1.7-14) [CRAN]\nunits    (0.8-2  -> 0.8-5 ) [CRAN]\nclassInt (0.4-9  -> 0.4-10) [CRAN]\npackage 'rlang' successfully unpacked and MD5 sums checked\npackage 'glue' successfully unpacked and MD5 sums checked\npackage 'cli' successfully unpacked and MD5 sums checked\npackage 'utf8' successfully unpacked and MD5 sums checked\npackage 'fansi' successfully unpacked and MD5 sums checked\npackage 'Rcpp' successfully unpacked and MD5 sums checked\npackage 'e1071' successfully unpacked and MD5 sums checked\npackage 'units' successfully unpacked and MD5 sums checked\npackage 'classInt' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\mdumelle\\AppData\\Local\\Temp\\Rtmpsdj1RL\\downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\mdumelle\\AppData\\Local\\Temp\\Rtmpsdj1RL\\remotesed185b353aa6\\USEPA-spdata.sfs24-540d7adc59f2699ab48d71144c8fb0853a56e48f/DESCRIPTION' ... OK\n* preparing 'spdata.sfs24':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'spdata.sfs24_0.0.0.9000.tar.gz'"
  },
  {
    "objectID": "index.html#how-to-follow-along-with-material",
    "href": "index.html#how-to-follow-along-with-material",
    "title": "Spatial Analysis and Statistical Modeling with R and spmodel",
    "section": "How to follow along with material",
    "text": "How to follow along with material\nThis workshop was built using Quarto and rendered to html. If you are familiar with using git and GitHub, you can fork and clone this repository, or simply clone directly and open the corresponding .qmd files to follow along with material in RStudio. You can also copy code snippets from the rendered book site and paste into your code files in RStudio."
  },
  {
    "objectID": "index.html#citation-information",
    "href": "index.html#citation-information",
    "title": "Spatial Analysis and Statistical Modeling with R and spmodel",
    "section": "Citation Information",
    "text": "Citation Information\nIf you use these software packages in a formal report or publication, please cite them. For example, the spmodel citation is available by running:\n\ncitation(package = \"spmodel\")\n\n\nTo cite spmodel in publications use:\n\n  Dumelle M, Higham M, Ver Hoef JM (2023). spmodel: Spatial statistical\n  modeling and prediction in R. PLOS ONE 18(3): e0282524.\n  https://doi.org/10.1371/journal.pone.0282524\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {{spmodel}: Spatial statistical modeling and prediction in {R}},\n    author = {Michael Dumelle and Matt Higham and Jay M. {Ver Hoef}},\n    journal = {PLOS ONE},\n    year = {2023},\n    volume = {18},\n    number = {3},\n    pages = {1--32},\n    doi = {10.1371/journal.pone.0282524},\n    url = {https://doi.org/10.1371/journal.pone.0282524},\n  }"
  },
  {
    "objectID": "index.html#disclaimer",
    "href": "index.html#disclaimer",
    "title": "Spatial Analysis and Statistical Modeling with R and spmodel",
    "section": "Disclaimer",
    "text": "Disclaimer\nThe views expressed in this manuscript are those of the authors and do not necessarily represent the views or policies of the U.S. Environmental Protection Agency or the U.S. National Oceanic and Atmospheric Administration. Any mention of trade names, products, or services does not imply an endorsement by the U.S. government, the U.S. Environmental Protection Agency, or the U.S. National Oceanic and Atmospheric Administration. The U.S. Environmental Protection Agency and the U.S. National Oceanic and Atmospheric Administration do not endorse any commercial products, services, or enterprises.\n\n\n\n\nDumelle, Michael, Matt Higham, and Jay M. Ver Hoef. 2023. “spmodel: Spatial Statistical Modeling and Prediction in R.” PLOS ONE 18 (3): 1–32. https://doi.org/10.1371/journal.pone.0282524."
  },
  {
    "objectID": "splm-additional.html#big-spatial-data",
    "href": "splm-additional.html#big-spatial-data",
    "title": "2  Additional spmodel Features",
    "section": "\n2.1 Big Spatial Data",
    "text": "2.1 Big Spatial Data\nFor large observed data sets, fitting spatial linear models or making predictions is challenging because these operations require a covariance matrix inverse, which are computationally challenging to obtain. Typically, observed data samples sizes approaching around 10,000 make model fitting or prediction infeasible on a standard computer in a reasonable amount of time (your definition of this may vary). This necessitates the use of model fitting and prediction tools that work for large data sets. spmodel offers big data methods for model fitting and prediction for point-referenced data via the local argument to splm() and predict().\n\n2.1.1 Model Fitting\nspmodel implements “local” spatial indexing as described by Ver Hoef et al. (2023). Observations are first assigned an index. Then for the purposes of model fitting, observations with different indexes are assumed uncorrelated. Assuming observations with different indexes are uncorrelated induces sparsity in the covariance matrix, which greatly reduces the computational time required for operations that involve its inverse. Models fit using spatial indexing are capable of fitting models with hundreds of thousands of observations relatively quickly. Ver Hoef et al. (2023) showed that in a variety of scenarios, spatial indexing yielded fixed effect confidence intervals with proper coverage.\nTo illustrate spatial indexing in spmodel, we first simulate a response variable sim_response with 5000 observations at random spatial locations in the unit square (sim_coords). Then we place the response and coordinates in a data.frame:\n\nset.seed(06022024)\nsim_params <- spcov_params(\"exponential\", de = 7, ie = 2, range = 0.7)\n\nn <- 5000\nx <- runif(n)\ny <- runif(n)\nsim_coords <- data.frame(x, y)\n\nsim_response <- sprnorm(sim_params, data = sim_coords, xcoord = x, ycoord = y)\nsim_data <- data.frame(sim_coords, sim_response)\n\nWe visualize the data by running\n\nggplot(sim_data, aes(x = x, y = y, color = sim_response)) +\n  geom_point() +\n  scale_color_viridis_c(limits = c(-8, 9)) +\n  theme_gray(base_size = 14)\n\n\n\nFigure 2.1: Distribution of simulated data\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe provide more detail regarding using spmodel to simulate data later on in this section.\n\n\nWe then use splm() to fit a spatial model to sim_data, providing the xcoord and ycoord arguments because sim_data is a data.frame, not an sf object. To implement spatial indexing, we use the local argument to splm(). Setting local to TRUE chooses default spatial indexing settings. We fit the model and time it by running\n\nfit_start_time <- proc.time()\nbdmod <- splm(sim_response ~ 1, data = sim_data,\n     spcov_type = \"exponential\",\n     xcoord = x, ycoord = y,\n     local = TRUE)\nfit_end_time <- proc.time()\nfit_end_time - fit_start_time\n#>    user  system elapsed \n#>    5.00    0.53    7.07\n\nThe model with 5000 observations is fit in just 7.07 seconds.\n\n\n\n\n\n\nNote\n\n\n\nWhen the sample size is larger than 5000 observations, splm() implements spatial indexing by default, as fitting time without spatial indexing becomes lengthy. This behavior can be overridden by explicitly setting local to FALSE.\n\n\nA summary of the model fit yields\n\nsummary(bdmod)\n#> \n#> Call:\n#> splm(formula = sim_response ~ 1, data = sim_data, spcov_type = \"exponential\", \n#>     xcoord = x, ycoord = y, local = TRUE)\n#> \n#> Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -8.4301 -1.8626  0.1926  1.8081  7.9181 \n#> \n#> Coefficients (fixed):\n#>             Estimate Std. Error z value Pr(>|z|)\n#> (Intercept)   0.5384     1.2610   0.427    0.669\n#> \n#> Coefficients (exponential spatial covariance):\n#>     de     ie  range \n#> 4.3557 1.9964 0.4643\n\nThe other way to specify local in splm() is via a list object, which offers much more control and customization over the spatial indexing. To learn more, read about local in splm()’s help page by running ?splm.\n\n\n\n\n\n\nNote\n\n\n\nEven for two separate data sets with the same sample size fit on the same machine, the computational time required to fit models via spatial indexing varies, depending on many factors like the number of iterations required for convergence and the number of observations assigned to each spatial index.\n\n\n\n2.1.2 Local Prediction\nUsing the fitted model, Ver Hoef et al. (2023) evaluates the performance of local neighborhood prediction. Local neighborhood prediction only uses some of the observed data to predict for an unobserved location of interest. Local neighborhood prediction is capable of making predictions of hundreds of thousands of observations relatively quickly. Ver Hoef et al. (2023) showed that in a variety of scenarios, local neighborhood prediction yielded prediction intervals with proper coverage.\nTo illustrate local neighborhood prediction in spmodel, we first simulate 3000 new random spatial locations in the unit square (sim_coords). Then we place the coordinates in a data.frame and visualize:\n\nn_pred <- 3000\nx_pred <- runif(n_pred)\ny_pred <- runif(n_pred)\nsim_preds <- tibble::tibble(x = x_pred, y = y_pred)\n\nTo implement local neighborhood prediction, we use the local argument to predict() (or augment()). Setting local in predict() (or augment()) to TRUE chooses default local neighborhood prediction settings. We compute local neighborhood predictions at the unobserved locations in sim_preds and time it by running\n\npred_start_time <- proc.time()\nsim_preds$preds <- predict(bdmod, newdata = sim_preds, local = TRUE)\npred_end_time <- proc.time()\npred_end_time - pred_start_time\n#>    user  system elapsed \n#>   13.92    1.04   18.05\n\nThe 3000 predictions are computed in just 18.05 seconds. We visualize them by running\n\nggplot(sim_preds, aes(x = x, y = y, color = preds)) +\n  geom_point() +\n  scale_color_viridis_c(limits = c(-8, 9)) +\n  theme_gray(base_size = 14)\n\n\n\nFigure 2.2: Distribution of local neighborhood predictions using the model fit to the large simulated data set.\n\n\n\n\nThese predictions at the unobserved locations closely match the pattern of the observed data.\nThe other way to specify local in predict() (or augment()) is via a list object, which offers much more control and customization over the local neighborhood prediction. To learn more, read about local in predict()’s (or augment()’s) help page by running ?predict.spmodel (or ?augment.spmodel).\n\n\n\n\n\n\nNote\n\n\n\nMost of the computational burden associated with prediction is actually from the observed data sample size used to fit the model (because an inverse is needed). As long as the observed data sample sizes are a few thousand or fewer, local prediction is not imperative, no matter the size of the prediction data. Note that parallel process can be used whether or not local prediction is implemented.\n\n\n\n\n\n\n\n\nTip\n\n\n\nloocv() also has a local argument for large data sets that is structured the same as local for predict() (and augment())."
  },
  {
    "objectID": "splm-additional.html#additional-arguments",
    "href": "splm-additional.html#additional-arguments",
    "title": "2  Additional spmodel Features",
    "section": "\n2.2 Additional Arguments",
    "text": "2.2 Additional Arguments\n\n2.2.1 Multiple Models\nsplm() fits multiple models simultaneously when spcov_type is a vector with more than one element:\n\nspmods <- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = c(\"exponential\", \"gaussian\"))\n\nspmods is a list with two elements: exponential, using the exponential spatial covariance; and gaussian, using the Gaussian spatial covariance.\n\nnames(spmods)\n#> [1] \"exponential\" \"gaussian\"\n\nspmods is natural to combine with glances() to glance at each model fit:\n\nglances(spmods)\n#> # A tibble: 2 × 10\n#>   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#>   <chr>  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>\n#> 1 expon…   365     2     3  367.  373.  373.  -184.     363.            0.683\n#> 2 gauss…   365     2     3  435.  441.  441.  -218.     363.            0.686\n\nand to combine with predict() to predict for each model fit.\n\n\n\n\n\n\nExercise\n\n\n\nWork with a neighbor to find 90% confidence intervals for the fixed effects in the Gaussian model using either (1) tidy() or (2) confint(). Before beginning, decide with your neighbor who will begin working on (1) tidy() and who will begin working on (2) confint().\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\ntidy(spmods$gaussian, conf.int = TRUE, conf.level = 0.90)\n#> # A tibble: 2 × 7\n#>   term          estimate std.error statistic p.value conf.low conf.high\n#>   <chr>            <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>\n#> 1 (Intercept)      9.21     0.196       46.9       0    8.89      9.53 \n#> 2 log_dist2road   -0.519    0.0184     -28.2       0   -0.549    -0.489\nconfint(spmods$gaussian, level = 0.90)\n#>                      5 %       95 %\n#> (Intercept)    8.8853387  9.5310288\n#> log_dist2road -0.5493091 -0.4887111\n\n\n\n\n\n2.2.2 Non-Spatial Random Effects\nIn the moss data, there are actually some spatial locations that have more than one measurement due to multiple samples being collected at a single location or due to a single sample being tested multiple times in the laboratory. The sample variable indexes the spatial location:\n\nmoss\n#> Simple feature collection with 365 features and 7 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: -445884.1 ymin: 1929616 xmax: -383656.8 ymax: 2061414\n#> Projected CRS: NAD83 / Alaska Albers\n#> # A tibble: 365 × 8\n#>    sample field_dup lab_rep year  sideroad log_dist2road log_Zn\n#>    <fct>  <fct>     <fct>   <fct> <fct>            <dbl>  <dbl>\n#>  1 001PR  1         1       2001  N                 2.68   7.33\n#>  2 001PR  1         2       2001  N                 2.68   7.38\n#>  3 002PR  1         1       2001  N                 2.54   7.58\n#>  4 003PR  1         1       2001  N                 2.97   7.63\n#>  5 004PR  1         1       2001  N                 2.72   7.26\n#>  6 005PR  1         1       2001  N                 2.76   7.65\n#>  7 006PR  1         1       2001  S                 2.30   7.59\n#>  8 007PR  1         1       2001  N                 2.78   7.16\n#>  9 008PR  1         1       2001  N                 2.93   7.19\n#> 10 009PR  1         1       2001  N                 2.79   8.07\n#> # ℹ 355 more rows\n#> # ℹ 1 more variable: geometry <POINT [m]>\n\nWe might expect Zinc concentration to be correlated within a spatial location; therefore, we might want to add sample as a non-spatial random effect (here, an intercept random effect) to the model with log_Zn as the response and log_dist2road as the predictor. The splm() function allows non-spatial random effects to be incorporated with the random argument, which takes a formula specification that is similar in syntax as the nlme (Pinheiro and Bates 2006) and lme4 (Bates et al. 2015) packages.\n\nrandint <- splm(log_Zn ~ log_dist2road,\n                data = moss, spcov_type = \"exponential\",\n                random = ~ (1 | sample))\n\n\n\n\n\n\n\nTip\n\n\n\nFor the randint model, in the random argument, sample is shorthand for (1 | sample). So the randint model could be written more concisely as\n\nrandint <- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ sample)\n\n\n\nThe summary output now shows an estimate of the variance of the random intercepts, in addition to the estimated fixed effects and estimated spatial covariance parameters.\n\nsummary(randint)\n#> \n#> Call:\n#> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\", \n#>     random = ~sample)\n#> \n#> Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -2.6234 -1.3228 -0.8026 -0.2642  1.0998 \n#> \n#> Coefficients (fixed):\n#>               Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept)    9.66066    0.26770   36.09   <2e-16 ***\n#> log_dist2road -0.55028    0.02071  -26.58   <2e-16 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Pseudo R-squared: 0.6605\n#> \n#> Coefficients (exponential spatial covariance):\n#>        de        ie     range \n#> 3.153e-01 2.094e-02 1.083e+04 \n#> \n#> Coefficients (random effects):\n#> 1 | sample \n#>    0.07995\n\nAnd, glances() shows that the model with the random intercepts is a better fit to the data than the model without random intercepts.\n\nspmod <- splm(log_Zn ~ log_dist2road,\n              data = moss, spcov_type = \"exponential\")\nglances(spmod, randint)\n#> # A tibble: 2 × 10\n#>   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#>   <chr>  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>\n#> 1 randi…   365     2     4  335.  343.  343.  -168.     363.            0.661\n#> 2 spmod    365     2     3  367.  373.  373.  -184.     363.            0.683\n\nAs another example, we might consider a model that also has random intercepts for year, or, a model that also has both random intercepts for year and random slopes for log_dist2road within year:\n\nyearint <- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ (1 | sample + year))\nyearsl <- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ (1 | sample) + \n                       (log_dist2road | year))\n\nglances() shows that, of these four models, the model that includes random intercepts for sample, random intercepts for year, and random slopes for year is best, according to the AIC and AICc metrics.\n\nglances(spmod, randint, yearint, yearsl)\n#> # A tibble: 4 × 10\n#>   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#>   <chr>  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>\n#> 1 yearsl   365     2     6  190.  202.  202.  -94.9     363.            0.215\n#> 2 yeari…   365     2     4  230.  238.  238. -115.      363.            0.729\n#> 3 randi…   365     2     4  335.  343.  343. -168.      363.            0.661\n#> 4 spmod    365     2     3  367.  373.  373. -184.      363.            0.683\n\n\n\n\n\n\n\nNote\n\n\n\nThe syntax ~ (log_dist2road | year) specifies that both random intercepts for year and random slopes for log_dist2road within year should be included in the model. If only random slopes are desired, then we should set random to ~ (-1 + log_dist2road | year).\n\n\n\n\n\n\n\n\nExercise\n\n\n\nPerhaps a model with random intercepts for sample and random intercepts and slopes for year but without any spatial covariance is an even better fit to the data. Fit such a model by specifying spcov_type to be \"none\". Then, use glances() to see how well this non-spatial model fits the moss data compared to the spatially explicit models.\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nnospcov <- splm(log_Zn ~ log_dist2road,\n                    data = moss, spcov_type = \"none\",\n                    random = ~ (1 | sample) + \n                      (log_dist2road | year))\nglances(spmod, randint, yearint, yearsl, nospcov)\n#> # A tibble: 5 × 10\n#>   model      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#>   <chr>  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>\n#> 1 yearsl   365     2     6  190.  202.  202.  -94.9     363.            0.215\n#> 2 yeari…   365     2     4  230.  238.  238. -115.      363.            0.729\n#> 3 randi…   365     2     4  335.  343.  343. -168.      363.            0.661\n#> 4 spmod    365     2     3  367.  373.  373. -184.      363.            0.683\n#> 5 nospc…   365     2     4  456.  464.  464. -228.      363             0.119\n## the model with no explicit spatial covariance has the worst fit \n## of the five models.\n\n\n\n\n\n2.2.3 Anisotropy\nBy default, splm() uses isotropic spatial covariance. Spatial covariance is isotropic if it behaves similarly in all directions. A spatial covariance is (geometrically) anisotropic if it does not behave similarly in all directions. Anisotropic models require estimation of two additional parameters: rotate and scale, which control the behavior of the spatial covariance as a function of distance and direction.\n\naniso <- splm(log_Zn ~ log_dist2road,\n              data = moss, spcov_type = \"exponential\",\n              anisotropy = TRUE)\naniso\n#> \n#> Call:\n#> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_type = \"exponential\", \n#>     anisotropy = TRUE)\n#> \n#> \n#> Coefficients (fixed):\n#>   (Intercept)  log_dist2road  \n#>         9.548         -0.546  \n#> \n#> \n#> Coefficients (exponential spatial covariance):\n#>        de         ie      range     rotate      scale  \n#> 3.561e-01  6.812e-02  8.732e+03  2.435e+00  4.753e-01\n\nWe can again use glances to compare the model that allows for anisotropy with the isotropic model:\n\nglances(spmod, aniso)\n#> # A tibble: 2 × 10\n#>   model     n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared\n#>   <chr> <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>\n#> 1 aniso   365     2     5  362.  372.  372.  -181.     363             0.705\n#> 2 spmod   365     2     3  367.  373.  373.  -184.     363.            0.683\n\nThe anisotropic model does have lower AIC and AICc than the isotropic model, indicating a better fit. However, the reduction in AIC and AICc is quite small, so we may still prefer the isotropic model for simplicity and interpretability.\n\n\n\n\n\n\nExercise\n\n\n\nVisualize the anisotropic level curve for aniso using plot(). Hint: Run ?plot.spmodel or visit this link. Which direction does the model predict two responses will be more correlated?\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nplot(aniso, which = 8)\n\n\n\n\nA clockwise rotation of this level curve by rotate followed by a scaling of the minor axis by the reciprocal of scale yields a spatial covariance that is isotropic.\n\n\n\n\n2.2.4 Partition Factors\nA partition factor is a categorical (or factor) variable that forces observations in different levels of the partition factor to be uncorrelated. The year variable in moss has two levels, 2001 and 2006, which correspond to the year of measurement. Suppose the goal is to fit a model that assumes observations from the same year are spatially correlated but observations from different years are not spatially correlated. In this context, year is a partition factor. We fit this model by running\n\npart <- splm(log_Zn ~ log_dist2road,\n             data = moss, spcov_type = \"exponential\",\n             partition_factor = ~ year)\n\nLike the formula and random arguments, the partition_factor argument requires a formula object.\n\n2.2.5 Fixing Covariance Parameters\nBy default, splm() estimates all unknown covariance parameters. However, we can also fix covariance parameters at known values with the spcov_initial argument for spatial covariance parameters and with the randcov_initial argument for non-spatial covariance parameters.\nAs an example, suppose that we want to fit a \"spherical\" covariance model to the moss data, but that, we want to fix the range at 20000 units so that errors from spatial locations more than 20000 units apart are not spatially correlated. We first create an spcov_initial object with the spcov_initial() function:\n\ninit_spher <- spcov_initial(\"spherical\", range = 20000, known = \"range\")\ninit_spher\n#> $initial\n#> range \n#> 20000 \n#> \n#> $is_known\n#> range \n#>  TRUE \n#> \n#> attr(,\"class\")\n#> [1] \"spherical\"\n\nWithin the function call, we specify that, for a \"spherical\" covariance, we would like to set the range parameter to 20000 and for that value to be known and therefore fixed in any subsequent estimation. We then provide init_spher as an argument to spcov_initial in splm():\n\nsplm(log_Zn ~ log_dist2road, data = moss,\n     spcov_initial = init_spher)\n#> \n#> Call:\n#> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_initial = init_spher)\n#> \n#> \n#> Coefficients (fixed):\n#>   (Intercept)  log_dist2road  \n#>        9.7194        -0.5607  \n#> \n#> \n#> Coefficients (spherical spatial covariance):\n#>        de         ie      range  \n#> 4.545e-01  8.572e-02  2.000e+04\n\nWhen spcov_initial is provided, spcov_type is not a necessary argument to splm().\n\n\n\n\n\n\nExercise\n\n\n\nFit a \"spherical\" spatial covariance model to the moss data set without a nugget effect (i.e., the model should have the ie independent variance parameter set to 0 and treated as known). Verify in the summary output that the ie is indeed 0 for this model.\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\ninit_no_ie <- spcov_initial(\"spherical\", ie = 0, known = \"ie\")\nno_ie <- splm(log_Zn ~ log_dist2road, data = moss,\n              spcov_initial = init_no_ie)\nsummary(no_ie)\n#> \n#> Call:\n#> splm(formula = log_Zn ~ log_dist2road, data = moss, spcov_initial = init_no_ie)\n#> \n#> Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -3.1766 -1.8420 -1.2975 -0.7249  0.6577 \n#> \n#> Coefficients (fixed):\n#>               Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept)   10.27912   28.99660   0.354    0.723    \n#> log_dist2road -0.56642    0.01974 -28.693   <2e-16 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Pseudo R-squared: 0.6967\n#> \n#> Coefficients (spherical spatial covariance):\n#>        de        ie     range \n#> 8.433e+02 0.000e+00 3.699e+07\n\n\n\n\n\n2.2.6 Random Forest Spatial Residual Models\nRandom forests are a popular machine-learning modeling tool. The random forest spatial residual model available in spmodel combines random forest modeling and spatial linear models. First, the model is fit using random forests and fitted values are obtained. Then the response residuals are used to fit a spatial linear model. Predictions at unobserved locations are computed as the sum of the random forest prediction and the predicted (i.e., Kriged) response residual from the spatial linear model. Suppose we split the moss data into training and test data sets, with the goal of predicting log_Zn in the test data.\n\nset.seed(1)\nn <- NROW(moss)\nn_train <- round(0.75 * n)\nn_test <- n - n_train\ntrain_index <- sample(n, size = n_train)\nmoss_train <- moss[train_index, , ]\nmoss_test <- moss[-train_index, , ]\n\nWe fit a random forest spatial residual model to the test data by running\n\nrfsrmod <- splmRF(log_Zn ~ log_dist2road, moss_train,\n                  spcov_type = \"exponential\")\n\nWe make predictions for the test data by running\n\n# results omitted\npredict(rfsrmod, moss_test)\n\n\n\n\n\n\n\nExercise\n\n\n\nUse predict() to store the random forest spatial residual predictions of log_Zn at locations in the test data and then compute the mean-squared prediction error (MSPE). Compare this MSPE to the MSPE from fitting a spatial linear model with an exponential covariance function.\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nrf_preds <- predict(rfsrmod, newdata = moss_test)\nrf_errors <- moss_test$log_Zn - rf_preds\nmean(rf_errors^2)\n#> [1] 0.1849228\n\nsplmmod <- splm(log_Zn ~ log_dist2road, moss_train,\n                  spcov_type = \"exponential\")\nsplm_preds <- predict(splmmod, newdata = moss_test)\nsplm_errors <- moss_test$log_Zn - splm_preds\nmean(splm_errors^2)\n#> [1] 0.1514774\n\nFor these data, the spatial linear model yielded more accurate predictions (lower MSPE)."
  },
  {
    "objectID": "splm-additional.html#areal-data",
    "href": "splm-additional.html#areal-data",
    "title": "2  Additional spmodel Features",
    "section": "\n2.3 Areal Data",
    "text": "2.3 Areal Data\n\n2.3.1 Data Introduction\nThroughout the section, we will use the seal data in the spmodel package. The seal data is an sf object with a POLYGON geometry. There are 62 polygons in the data, some of which have non-missing values of log_trend, which is the log of the estimated harbor-seal trends that were calculated from abundance data.\nThe following code generates a visualization of the seal data: polygons that are grey have a missing value for log_trend.\n\nggplot(seal, aes(fill = log_trend)) +\n  geom_sf() +\n  scale_fill_viridis_c() +\n  theme_bw(base_size = 14) \n\n\n\n\nOur goal is to fit a spatial autoregressive model (Equation 1.4 and Equation 1.6) to the log_trend response variable with the spautor() function. Then, we will use the fitted model to predict the log_trend for sites where log_trend is not recorded.\n\n2.3.2 spautor() Syntax and Output Interpretation\nThe syntax for fitting a model to areal data with spautor() is very similar to that used for splm(). Again, there are generally at least three required arguments:\n\n\nformula: a formula that describes the relationship between the response variable (\\(\\mathbf{y}\\)) and explanatory variables (\\(\\mathbf{X}\\))\n\n\nformula in spautor() is the same as formula in lm() and splm()\n\n\n\n\ndata: a data.frame or sf object that contains the response variable, explanatory variables, and spatial information. Note that if data is a data.frame, then W is an additional required argument to spautor().\n\nspcov_type: the spatial covariance type (\"car\" or \"sar\")\n\nWe can fit a conditional auto-regressive (CAR) model with\n\nsealmod <- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\")\nsummary(sealmod)\n#> \n#> Call:\n#> spautor(formula = log_trend ~ 1, data = seal, spcov_type = \"car\")\n#> \n#> Residuals:\n#>      Min       1Q   Median       3Q      Max \n#> -0.34455 -0.10417  0.04410  0.07338  0.20475 \n#> \n#> Coefficients (fixed):\n#>             Estimate Std. Error z value Pr(>|z|)   \n#> (Intercept) -0.07090    0.02497  -2.839  0.00452 **\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Coefficients (car spatial covariance):\n#>      de   range   extra \n#> 0.03252 0.42037 0.02177\n\n\n\n\nWe can relate some of the components in the summary output to the model in Equation 1.4 and Equation 1.6:\n\nthe value in the Estimate column of the Coefficients (fixed) table form \\(\\boldsymbol{\\hat{\\beta}}\\), an estimate of \\(\\boldsymbol{\\beta}\\).\nthe de value of 0.033 in the Coefficients (car spatial covariance) table is \\(\\hat{\\sigma}^2_{de}\\), which is an estimate of \\(\\sigma^2_{de}\\), the variance of \\(\\boldsymbol{\\tau}\\).\nthe range value of 0.42 in the Coefficients (car spatial covariance) table is \\(\\hat{\\phi}\\), an estimate of \\(\\phi\\) in Equation 1.6.\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, \\(\\sigma^2_{ie}\\) is assumed to be 0 for autoregressive models and hence, ie is omitted from the summary output.\n\n\nThough the weight matrix \\(\\mathbf{W}\\) in Equation 1.6 used in the model does not appear in the summary output, we can pull the weight matrix from the sealmod object with\n\nsealmod$W\n\nBy default, spautor() uses queen contiguity to form the weight matrix: observations are “neighbors” if they share at least one boundary (even if that boundary is a single point). Recall that observations are not considered neighbors with themselves. Also by default, spautor() row standardizes the weight matrix so that each of the rows in \\(\\mathbf{W}\\) sum to \\(1\\). Row standardization of the weight matrix is performed by default because doing so results in “nice” properties of the resulting covariance matrix (Ver Hoef et al. 2018). The first row of the weight matrix is\n\nsealmod$W[1, ]\n#>  [1] 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#>  [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#> [15] 0.0000000 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#> [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333\n#> [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#> [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#> [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#> [50] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n#> [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000\n\nThe output indicates that the first observation is neighbors with the second observation, the sixteenth observation, and the twenty-eighth observation.\n\nwhich(sealmod$W[1, ] > 0)\n#> [1]  2 16 28\n\nFinally, if we re-examine \\(\\mathbf{W}\\), we can note that some rows of \\(\\mathbf{W}\\) do not have any positive values, indicating that some observations in the data have no neighbors. Looking back on the plot of the data, we see that there are indeed a few “island” sites that do not share a boundary with any other polygons. The errors for these spatial locations are assumed to be uncorrelated with all other random errors, and, they are given a unique variance parameter that is the extra spatial covariance estimate in the summary output of the model.\n\n2.3.3 Additional Analysis\nMost of the helper functions for models fit with splm() are also useful for models fit with spautor(). Additionally, most of the additional arguments for splm() are also additional arguments for spautor().\nAll helper functions available for splm() model objects are also available for spautor() model objects:\n\n\naugment(), glance(), and glances()\n\nmodel fit statistics with AIC(), AICc() and GR2()\n\nmodel diagnostics statistics with cooks.distance(), residuals(), fitted(), etc.\n\nspautor() model objects accommodate all additional arguments previously mentioned except big data sets and anisotropy.\n\n\n\n\n\n\nNote\n\n\n\nBig data applications are not available because the models are parameterized in terms of their inverse covariance matrix, not the covariance matrix, which makes the “local” approach infeasible. The anisotropy argument is not available for spautor() because the covariance for an autoregressive model is based on the neighborhood structure of the spatial locations, not on distance.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nChoose a couple of the helper functions that you would like to explore and apply those functions to the fitted seal model.\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nAIC(sealmod)\n#> [1] -30.87584\nfitted(sealmod)\n#>           2           3           4           5           6           7 \n#> -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 \n#>           8          10          11          12          14          16 \n#> -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 \n#>          17          20          21          22          23          24 \n#> -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 \n#>          25          26          28          29          30          31 \n#> -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 \n#>          33          34          35          37          38          39 \n#> -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 -0.07090121 \n#>          41          45          59          60 \n#> -0.07090121 -0.07090121 -0.07090121 -0.07090121\n\n\n\n\n\n2.3.4 Prediction with Areal Data\nPrediction of response values for unobserved polygons with areal data requires that the polygons with missing response values be included in the data argument supplied to spautor(). The reason for this requirement is that exclusion of these polygons changes the underlying neighborhood structure of the data, and, therefore changes the covariance matrix.\nFor areal data, we can obtain predictions for unobserved polygons using predict() on the fitted model object or augment() on the fitted model object, specifying the newdata argument to be mod$newdata. Both approaches are given below:\n\nsealmod <- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\")\nsummary(sealmod)\n\npredict(sealmod)\n\n\naugment(sealmod, newdata = sealmod$newdata)\n#> Simple feature collection with 28 features and 2 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 913618.8 ymin: 1007542 xmax: 1115097 ymax: 1132682\n#> Projected CRS: NAD83 / Alaska Albers\n#> # A tibble: 28 × 3\n#>    log_trend  .fitted                                                geometry\n#>  *     <dbl>    <dbl>                                           <POLYGON [m]>\n#>  1        NA -0.115   ((1035002 1054710, 1035002 1054542, 1035002 1053542, 1…\n#>  2        NA -0.00908 ((1043093 1020553, 1043097 1020550, 1043101 1020550, 1…\n#>  3        NA -0.0602  ((1099737 1054310, 1099752 1054262, 1099788 1054278, 1…\n#>  4        NA -0.0359  ((1099002 1036542, 1099134 1036462, 1099139 1036431, 1…\n#>  5        NA -0.0723  ((1076902 1053189, 1076912 1053179, 1076931 1053179, 1…\n#>  6        NA -0.0548  ((1070501 1046969, 1070317 1046598, 1070308 1046542, 1…\n#>  7        NA -0.0976  ((1072995 1054942, 1072996 1054910, 1072997 1054878, 1…\n#>  8        NA -0.0714  ((960001.5 1127667, 960110.8 1127542, 960144.1 1127495…\n#>  9        NA -0.0825  ((1031308 1079817, 1031293 1079754, 1031289 1079741, 1…\n#> 10        NA -0.0592  ((998923.7 1053647, 998922.5 1053609, 998950 1053631, …\n#> # ℹ 18 more rows\n\n\n\n\n\n\n\nNote\n\n\n\nThe mod$newdata syntax also works for models fit with splm(), where the data used contains missing values for the response variable at any unobserved locations.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nVerify that the fitted autoregressive model with the seal data changes when the polygons with missing response values are excluded from the data argument in spautor(). The following code creates a data without the polygons with missing values:\n\nis_missing <- is.na(seal$log_trend)\nseal_nomiss <- seal[!is_missing, , ]\n\n\n\n\n\n\n\n\n\nExercise Solution\n\n\n\n\n\n\nsealmod_nomiss <- spautor(log_trend ~ 1,\n                          data = seal_nomiss, spcov_type = \"car\")\nprint(sealmod)\n#> \n#> Call:\n#> spautor(formula = log_trend ~ 1, data = seal, spcov_type = \"car\")\n#> \n#> \n#> Coefficients (fixed):\n#> (Intercept)  \n#>     -0.0709  \n#> \n#> \n#> Coefficients (car spatial covariance):\n#>      de    range    extra  \n#> 0.03252  0.42037  0.02177\nprint(sealmod_nomiss)\n#> \n#> Call:\n#> spautor(formula = log_trend ~ 1, data = seal_nomiss, spcov_type = \"car\")\n#> \n#> \n#> Coefficients (fixed):\n#> (Intercept)  \n#>    -0.08152  \n#> \n#> \n#> Coefficients (car spatial covariance):\n#>      de    range    extra  \n#> 0.02297  0.41280  0.01958"
  },
  {
    "objectID": "splm-additional.html#sec-simulate-gauss",
    "href": "splm-additional.html#sec-simulate-gauss",
    "title": "2  Additional spmodel Features",
    "section": "\n2.4 Simulating Spatial Gaussian Data",
    "text": "2.4 Simulating Spatial Gaussian Data\nWe simulate Gaussian spatial data using sprnorm(). sprnorm() is similar in structure to rnorm() for simulating non-spatial Gaussian data. The first argument to sprnorm() is spcov_params, which is a spatial covariance parameter object created with spcov_params():\n\nparams <- spcov_params(\"exponential\", de = 1, ie = 0.5, range = 5e5)\n\n\n\n\n\n\n\nNote\n\n\n\nWhen the type argument to coef() is \"spcov\", the estimated spatial covariance parameters are returned as an spcov_params object, naturally usable simulation-based contexts that require conditioning on these estimated parameters.\n\n\nsprnorm() simulates data at each location in data for each of n samples (specified via n) with some mean vector (specified via mean). We simulate one realization of zero-mean Gaussian data with spatial covariance structure from params at each location in the sulfate data by running\n\nset.seed(1)\nsulfate$z <- sprnorm(params, data = sulfate)\n\n\n\n\n\n\n\nCaution\n\n\n\nSimulating spatial data in spmodel requires the inverse (more rigorously, the Cholesky decomposition) of the covariance matrix, which can take awhile for sample sizes exceeding 10,000. Regardless of the number of realizations simulated, this inverse is only needed once, which means that simulating many realizations (via samples) takes nearly the same time as simulating just one.\n\n\nWe visualize this realization by running\n\nggplot(sulfate, aes(color = z)) +\n  geom_sf() +\n  scale_color_viridis_c() +\n  theme_gray(base_size = 14)\n\n\n\n\nWe visualize an empirical semivariogram of this realization by running\n\nesv_out <- esv(z ~ 1, sulfate)\nggplot(esv_out, aes(x = dist, y = gamma, size = np)) +\n  geom_point() +\n  lims(y = c(0, NA)) +\n  theme_gray(base_size = 14)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe empirical semivariogram is a diagnostic tool that can be used to characterize spatial dependence. On the x-axis is distance between observations. On the y-axis is the average squared difference between response variables (semivariance) in different distance “bins”. Typically when spatial dependence exists, the semivariance is smaller at short distances and larger at far distances. In the figure above, the size of the circle is proportional to the number of unique response variable pairs used in the distance bin. To assess leftover spatial dependence in a model, typically semivariograms are constructed on residuals from the nonspatial fitted model. The empirical semivariogram is intimately connected to empirical correlations/correllograms."
  },
  {
    "objectID": "splm-additional.html#r-code-appendix",
    "href": "splm-additional.html#r-code-appendix",
    "title": "2  Additional spmodel Features",
    "section": "\n2.5 R Code Appendix",
    "text": "2.5 R Code Appendix\n\n\n\n\nlibrary(spmodel)\nlibrary(ggplot2)\nset.seed(06022024)\nsim_params <- spcov_params(\"exponential\", de = 7, ie = 2, range = 0.7)\n\nn <- 5000\nx <- runif(n)\ny <- runif(n)\nsim_coords <- data.frame(x, y)\n\nsim_response <- sprnorm(sim_params, data = sim_coords, xcoord = x, ycoord = y)\nsim_data <- data.frame(sim_coords, sim_response)\nggplot(sim_data, aes(x = x, y = y, color = sim_response)) +\n  geom_point() +\n  scale_color_viridis_c(limits = c(-8, 9)) +\n  theme_gray(base_size = 14)\nfit_start_time <- proc.time()\nbdmod <- splm(sim_response ~ 1, data = sim_data,\n     spcov_type = \"exponential\",\n     xcoord = x, ycoord = y,\n     local = TRUE)\nfit_end_time <- proc.time()\nfit_end_time - fit_start_time\nsummary(bdmod)\nn_pred <- 3000\nx_pred <- runif(n_pred)\ny_pred <- runif(n_pred)\nsim_preds <- tibble::tibble(x = x_pred, y = y_pred)\npred_start_time <- proc.time()\nsim_preds$preds <- predict(bdmod, newdata = sim_preds, local = TRUE)\npred_end_time <- proc.time()\npred_end_time - pred_start_time\nggplot(sim_preds, aes(x = x, y = y, color = preds)) +\n  geom_point() +\n  scale_color_viridis_c(limits = c(-8, 9)) +\n  theme_gray(base_size = 14)\nspmods <- splm(formula = log_Zn ~ log_dist2road, data = moss,\n              spcov_type = c(\"exponential\", \"gaussian\"))\nnames(spmods)\nglances(spmods)\ntidy(spmods$gaussian, conf.int = TRUE, conf.level = 0.90)\nconfint(spmods$gaussian, level = 0.90)\nmoss\nrandint <- splm(log_Zn ~ log_dist2road,\n                data = moss, spcov_type = \"exponential\",\n                random = ~ (1 | sample))\nrandint <- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ sample)\nsummary(randint)\nspmod <- splm(log_Zn ~ log_dist2road,\n              data = moss, spcov_type = \"exponential\")\nglances(spmod, randint)\nyearint <- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ (1 | sample + year))\nyearsl <- splm(log_Zn ~ log_dist2road,\n                      data = moss, spcov_type = \"exponential\",\n                      random = ~ (1 | sample) + \n                       (log_dist2road | year))\nglances(spmod, randint, yearint, yearsl)\nnospcov <- splm(log_Zn ~ log_dist2road,\n                    data = moss, spcov_type = \"none\",\n                    random = ~ (1 | sample) + \n                      (log_dist2road | year))\nglances(spmod, randint, yearint, yearsl, nospcov)\n## the model with no explicit spatial covariance has the worst fit \n## of the five models.\naniso <- splm(log_Zn ~ log_dist2road,\n              data = moss, spcov_type = \"exponential\",\n              anisotropy = TRUE)\naniso\nglances(spmod, aniso)\nplot(aniso, which = 8)\npart <- splm(log_Zn ~ log_dist2road,\n             data = moss, spcov_type = \"exponential\",\n             partition_factor = ~ year)\ninit_spher <- spcov_initial(\"spherical\", range = 20000, known = \"range\")\ninit_spher\nsplm(log_Zn ~ log_dist2road, data = moss,\n     spcov_initial = init_spher)\ninit_no_ie <- spcov_initial(\"spherical\", ie = 0, known = \"ie\")\nno_ie <- splm(log_Zn ~ log_dist2road, data = moss,\n              spcov_initial = init_no_ie)\nsummary(no_ie)\nset.seed(1)\nn <- NROW(moss)\nn_train <- round(0.75 * n)\nn_test <- n - n_train\ntrain_index <- sample(n, size = n_train)\nmoss_train <- moss[train_index, , ]\nmoss_test <- moss[-train_index, , ]\nrfsrmod <- splmRF(log_Zn ~ log_dist2road, moss_train,\n                  spcov_type = \"exponential\")\n# results omitted\npredict(rfsrmod, moss_test)\nrf_preds <- predict(rfsrmod, newdata = moss_test)\nrf_errors <- moss_test$log_Zn - rf_preds\nmean(rf_errors^2)\n\nsplmmod <- splm(log_Zn ~ log_dist2road, moss_train,\n                  spcov_type = \"exponential\")\nsplm_preds <- predict(splmmod, newdata = moss_test)\nsplm_errors <- moss_test$log_Zn - splm_preds\nmean(splm_errors^2)\nggplot(seal, aes(fill = log_trend)) +\n  geom_sf() +\n  scale_fill_viridis_c() +\n  theme_bw(base_size = 14) \nsealmod <- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\")\nsummary(sealmod)\nspcov_params_car <- coef(sealmod, type = \"spcov\")\nde_car <- as.vector(round(spcov_params_car[[\"de\"]], digits = 3))\nrange_car <- as.vector(round(spcov_params_car[[\"range\"]], digits = 3))\nsealmod$W\nsealmod$W[1, ]\nwhich(sealmod$W[1, ] > 0)\nAIC(sealmod)\nfitted(sealmod)\nsealmod <- spautor(log_trend ~ 1, data = seal, spcov_type = \"car\")\nsummary(sealmod)\n\npredict(sealmod)\naugment(sealmod, newdata = sealmod$newdata)\nis_missing <- is.na(seal$log_trend)\nseal_nomiss <- seal[!is_missing, , ]\nsealmod_nomiss <- spautor(log_trend ~ 1,\n                          data = seal_nomiss, spcov_type = \"car\")\nprint(sealmod)\nprint(sealmod_nomiss)\nparams <- spcov_params(\"exponential\", de = 1, ie = 0.5, range = 5e5)\nset.seed(1)\nsulfate$z <- sprnorm(params, data = sulfate)\nggplot(sulfate, aes(color = z)) +\n  geom_sf() +\n  scale_color_viridis_c() +\n  theme_gray(base_size = 14)\nesv_out <- esv(z ~ 1, sulfate)\nggplot(esv_out, aes(x = dist, y = gamma, size = np)) +\n  geom_point() +\n  lims(y = c(0, NA)) +\n  theme_gray(base_size = 14)\n\n\n\n\n\nBates, Douglas, Martin Mächler, Ben Bolker, and Steve Walker. 2015. “Fitting Linear Mixed-Effects Models Using lme4.” Journal of Statistical Software 67 (1): 1–48. https://doi.org/10.18637/jss.v067.i01.\n\n\nPinheiro, José, and Douglas Bates. 2006. Mixed-Effects Models in S and S-PLUS. Springer science & business media.\n\n\nVer Hoef, Jay M, Michael Dumelle, Matt Higham, Erin E Peterson, and Daniel J Isaak. 2023. “Indexing and Partitioning the Spatial Linear Model for Large Data Sets.” Plos One 18 (11): e0291906.\n\n\nVer Hoef, Jay M, Erin E Peterson, Mevin B Hooten, Ephraim M Hanks, and Marie-Josèe Fortin. 2018. “Spatial Autoregressive Models for Statistical Inference from Ecological Data.” Ecological Monographs 88 (1): 36–59."
  }
]