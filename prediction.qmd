# Prediction {#sec-prediction}

```{r source_r, echo = FALSE}
source("_common.R")
```

Throughout this section, we will use the `spmodel` package and the `ggplot2` package:

```{r}
library(spmodel)
library(ggplot2)
```

__Goals__: 

* Predict the response value at an unobserved location for point-referenced data.
* Calculate leave-one-out cross-validation residuals.

## Data Introduction

The `moose` data in the `spmodel` package contains observations from a moose survey in Alaska. The Alaska Department of Fish and Game performed the survey on 218 spatial locations throughout the region of interest. Our goal is to predict the moose count in 100 spatial locations in the `moose_pred` data frame that were not surveyed. Both `elev`, the elevation of the spatial location, and `strat`, a stratification variable based on landscape metrics that is either `"L"` for Low or `"M"` for medium, are possible predictors for moose `count`.

```{r}
moose
```

We visualize the moose counts by running

```{r}
ggplot(data = moose, aes(colour = count)) +
  geom_sf() +
  scale_colour_viridis_c(limits = c(0, 40)) +
  theme_minimal()
```

From our plot, we see that there are a large number of observed moose counts at or near 0. Therefore, perhaps a generalized linear model in the Poisson or negative binomial family might be more appropriate for this particular data set. We will come back to this issue in @sec-spglm; however, for this section, we assume that a standard spatial linear model is appropriate.

::: {.callout-note}
## Note

We also see in the plot that the spatial locations in the survey were clearly not randomly selected. Random selection of spatial locations is only required for inference in design-based analyses. For model-based analyses, random selection of spatial locations is not necessarily an assumption (@brus2021statistical; @dumelle2022comparison).
:::

## Moose Count Predictions

In this section, we show how to use `predict()` and `augment()` to perform spatial prediction (also called Kriging) for point-referenced data from a model fit with `splm()`. First, we fit a spatial model to the `moose` data with a `"spherical"` spatial covariance and `elev`, `strat`, and their interaction as predictors in the model:

```{r}
moosemod <- splm(count ~ elev * strat, data = moose,
                  spcov_type = "spherical")
tidy(moosemod)
```

::: {.callout-tip}
`elev * strat` is shorthand for `elev + strat + elev:strat`.
:::

We then use `predict()` to predict the moose `count` at the spatial locations in `moose_preds`. The `predict()` function for models fit with `splm()` works in the same way as it does for models fit with `lm()`. We provide `predict()` with the fitted model object, along with a `newdata` argument that is an `sf` object, `data.frame`, or `tibble` that contains the locations at which to predict. `newdata` must have the same predictors as those used to fit the spatial model. We see that `moose_preds` contains the predictors (`elev` and `strat`) and the locations at which to predict:
```{r}
moose_preds
```


```{r}
#| results: false

# results omitted
predict(moosemod, newdata = moose_preds)
```

The output of `predict()` (not rendered in this document) gives predicted moose counts for the 100 unobserved spatial locations in `moose_preds`.

::: {.callout-note}
## Note

Examining some of the predictions, we see that a few are negative. These unreasonable negative values are a further indication that we should use a spatial generalized linear model in @sec-spglm.
:::

The `augment()` function can also be used to obtain predictions for unobserved locations. While the required arguments to `augment()` are the same as the arguments used in `predict()` (the name of the fitted model object along with a `newdata` data frame), the output of `augment()` is an `sf` object with predictions in the `.fitted` column. Often, using `augment()` is more convenient than using `predict()`, as `augment()` returns an object with predictions alongside the spatial locations and any predictors used in the model.

```{r}
moose_aug <- augment(moosemod, newdata = moose_preds)
moose_aug
```

We can construct a plot of the predictions with

```{r}
ggplot(data = moose, aes(colour = count)) +
  geom_sf(alpha = 0.4) +
  geom_sf(data = moose_aug, aes(colour = .fitted)) +
  scale_colour_viridis_c(limits = c(0, 40)) +
  theme_minimal()
```

In the plot, the observed counts are also shown with faded points. We see that, most of the predictions are at or near 0, but spatial locations that are close in proximity to observed counts that are very large have a higher predicted count (for example, the point in the southwest region that is directly south of the observed count coloured yellow is predicted to be around 10).

::: {.callout-important icon="false"}
## Exercise

Examine the help file `?augment.spmodel` or by visiting [this link](https://usepa.github.io/spmodel/reference/augment.spmodel.html) and create site-wise 99% prediction intervals for the unsampled locations found in `moose_preds`.

:::

::: {.callout-important icon="false" collapse="true"}
## Solution

```{r}
augment(moosemod, newdata = moose_preds, interval = "prediction",
        level = 0.99)
```

:::

## Cross Validation

Leave-one-out cross validation can be performed to compare model fits as an alternative to the model fit metrics discussed in @sec-model-fitting [@hastie2009elements]. In leave-one-out cross validation, a single observation is removed from the data, the model is re-fit, and a prediction is made for the held-out observation. Then, a loss metric like mean-squared-prediction error (MSPE) is computed and used to evaluate model fit. The lower the mean-squared-prediction error, the better the model fit. 

The `loocv()` function can be used to perform leave-one-out cross validation on a fitted model object.

```{r}
loocv(moosemod)
```

The output of `loocv()` is the mean-squared-prediction-error (MSPE). 

::: {.callout-important icon="false"}
## Exercise

Fit a model with `count` as the response variable from the `moose` data with a `"spherical"` spatial covariance model for the random errors but no predictors as fixed effects. Compare the MSPE from leave-one-out cross-validation for this model with the previously fit `moosemod`. Which model is better, according to the leave-one-out cross-validation criterion? 

Then, for the model with the lower MSPE, obtain the leave-one-out cross validation predictions and their standard errors. Hint: run `?loocv` or visit [this link](https://usepa.github.io/spmodel/reference/loocv.html).
:::

::: {.callout-important icon="false" collapse="true"}
## Solution
```{r}
moose_int <- splm(count ~ 1, data = moose,
                  spcov_type = "spherical")
loocv(moose_int)
```

```{r}
#| results: hide

# results omitted
loocv(moosemod, cv_predict = TRUE, se.fit = TRUE)
```

:::

## R Code Appendix

```{r get-labels, echo = FALSE}
labs = knitr::all_labels()
labs = setdiff(labs, c("source_r", "get-labels"))
```

```{r all-code, ref.label=labs, eval = FALSE}
```
